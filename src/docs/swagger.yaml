basePath: /v1
definitions:
  example.AddMealRequest:
    properties:
      calories:
        example: 500
        type: number
      carbs:
        example: 60
        type: number
      fat:
        example: 15
        type: number
      label:
        example: Lunch
        type: string
      meal_time:
        example: "2023-10-10T12:00:00Z"
        type: string
      protein:
        example: 20
        type: number
      title:
        example: Nasi Goreng
        type: string
    type: object
  example.AddMealResponse:
    properties:
      meal:
        $ref: '#/definitions/example.MealHistory'
      message:
        example: Meal added successfully
        type: string
      status:
        example: success
        type: string
    type: object
  example.AddMealScanDetailRequest:
    properties:
      api_result:
        example: '{...}'
        type: string
      meal_history_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  example.AddMealScanDetailResponse:
    properties:
      message:
        example: Meal scan detail added successfully
        type: string
      status:
        example: success
        type: string
    type: object
  example.AddWeightHeightRequest:
    properties:
      height:
        example: 175
        type: number
      recorded_at:
        example: "2023-10-10T12:00:00Z"
        type: string
      weight:
        example: 70.5
        type: number
    type: object
  example.AddWeightHeightResponse:
    properties:
      data:
        $ref: '#/definitions/example.UsersWeightHeightHistory'
      message:
        example: Weight and height record added successfully
        type: string
      status:
        example: success
        type: string
    type: object
  example.AddWeightHeightTargetRequest:
    properties:
      height:
        example: 175
        type: number
      target_date:
        example: "2023-10-10T12:00:00Z"
        type: string
      weight:
        example: 70.5
        type: number
    type: object
  example.AddWeightHeightTargetResponse:
    properties:
      data:
        $ref: '#/definitions/example.UsersWeightHeightTarget'
      message:
        example: Weight and height target record added successfully
        type: string
      status:
        example: success
        type: string
    type: object
  example.AdminSubscriptionPlanWithUsersResponse:
    properties:
      ai_scan_limit:
        type: integer
      description:
        type: string
      features:
        additionalProperties:
          type: boolean
        type: object
      id:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      price:
        type: integer
      price_formatted:
        type: string
      user_count:
        type: integer
      users:
        items:
          $ref: '#/definitions/example.UserSubscriptionResponse'
        type: array
      validity_days:
        type: integer
    type: object
  example.AdminSubscriptionPlansResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/example.AdminSubscriptionPlanWithUsersResponse'
        type: array
      message:
        type: string
      status:
        type: string
    type: object
  example.CalorieStat:
    properties:
      calories:
        example: 500
        type: number
      recorded_at:
        example: "2023-10-10T08:00:00Z"
        type: string
    type: object
  example.CreateArticleCategoryRequest:
    properties:
      name:
        example: Technology
        type: string
    type: object
  example.CreateArticleRequest:
    properties:
      category_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      content:
        example: This is the content of my article
        type: string
      image:
        example: https://example.com/image.jpg
        type: string
      published_at:
        example: "2023-10-10T12:00:00Z"
        type: string
      slug:
        example: my-first-article
        type: string
      title:
        example: My First Article
        type: string
    type: object
  example.CreateProductTokenResponse:
    properties:
      data:
        $ref: '#/definitions/example.ProductTokenResponse'
      message:
        example: Product token created successfully
        type: string
      status:
        example: success
        type: string
    type: object
  example.CreateRecipeRequest:
    properties:
      day:
        example: monday
        type: string
      description:
        example: Nasi goreng dengan bumbu rahasia
        type: string
      image:
        example: https://example.com/nasi-goreng.jpg
        type: string
      ingredients:
        example: Nasi, telur, bawang, kecap
        type: string
      instructions:
        example: 1. Tumis bawang...
        type: string
      label:
        example: Main Course
        type: string
      name:
        example: Nasi Goreng Spesial
        type: string
      slug:
        example: nasi-goreng-spesial
        type: string
    type: object
  example.CreateUserResponse:
    properties:
      message:
        example: Create user successfully
        type: string
      status:
        example: success
        type: string
      user:
        $ref: '#/definitions/example.User'
    type: object
  example.DailyNutrition:
    properties:
      calories:
        example: 1250.5
        type: number
      carbs:
        example: 150.3
        type: number
      date:
        example: "2023-10-10T00:00:00Z"
        type: string
      fat:
        example: 45.1
        type: number
      protein:
        example: 85.2
        type: number
    type: object
  example.DeleteMealResponse:
    properties:
      message:
        example: Meal deleted successfully
        type: string
      status:
        example: success
        type: string
    type: object
  example.DeleteUserResponse:
    properties:
      message:
        example: Delete user successfully
        type: string
      status:
        example: success
        type: string
    type: object
  example.DeleteWeightHeightResponse:
    properties:
      message:
        example: Weight and height record deleted successfully
        type: string
      status:
        example: success
        type: string
    type: object
  example.DeleteWeightHeightTargetResponse:
    properties:
      message:
        example: Weight and height target record deleted successfully
        type: string
      status:
        example: success
        type: string
    type: object
  example.DuplicateEmail:
    properties:
      message:
        example: Email already taken
        type: string
      status:
        example: error
        type: string
    type: object
  example.FailedLogin:
    properties:
      message:
        example: Invalid email or password
        type: string
      status:
        example: error
        type: string
    type: object
  example.FailedResetPassword:
    properties:
      message:
        example: Password reset failed
        type: string
      status:
        example: error
        type: string
    type: object
  example.FailedVerifyEmail:
    properties:
      message:
        example: Verify email failed
        type: string
      status:
        example: error
        type: string
    type: object
  example.FailedVerifyProductToken:
    properties:
      message:
        example: Invalid or already used product token
        type: string
      status:
        example: error
        type: string
    type: object
  example.FeatureFlags:
    properties:
      bmi_check:
        example: true
        type: boolean
      scan_ai:
        example: true
        type: boolean
    type: object
  example.Forbidden:
    properties:
      message:
        example: You don't have permission to access this resource
        type: string
      status:
        example: error
        type: string
    type: object
  example.ForgotPasswordResponse:
    properties:
      message:
        example: A password reset link has been sent to your email address.
        type: string
      status:
        example: success
        type: string
    type: object
  example.GetAllMealsResponse:
    properties:
      limit:
        example: 10
        type: integer
      message:
        example: Get all meals successfully
        type: string
      page:
        example: 1
        type: integer
      results:
        items:
          $ref: '#/definitions/example.MealHistory'
        type: array
      status:
        example: success
        type: string
      total_pages:
        example: 5
        type: integer
      total_results:
        example: 50
        type: integer
    type: object
  example.GetAllProductTokensResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/example.ProductTokenResponse'
        type: array
      message:
        example: Product tokens retrieved successfully
        type: string
      status:
        example: success
        type: string
    type: object
  example.GetAllUserResponse:
    properties:
      limit:
        example: 10
        type: integer
      message:
        example: Get all users successfully
        type: string
      page:
        example: 1
        type: integer
      results:
        items:
          $ref: '#/definitions/example.User'
        type: array
      status:
        example: success
        type: string
      total_pages:
        example: 1
        type: integer
      total_results:
        example: 1
        type: integer
    type: object
  example.GetAllWeightHeightResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/example.UsersWeightHeightHistory'
        type: array
      message:
        example: Weight and height records fetched successfully
        type: string
      status:
        example: success
        type: string
    type: object
  example.GetAllWeightHeightTargetResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/example.UsersWeightHeightTarget'
        type: array
      message:
        example: Weight and height target records fetched successfully
        type: string
      status:
        example: success
        type: string
    type: object
  example.GetHomeStatisticsResponse:
    properties:
      data:
        $ref: '#/definitions/example.HomeStatistics'
      message:
        example: Home statistics fetched successfully
        type: string
      status:
        example: success
        type: string
    type: object
  example.GetMealResponse:
    properties:
      meal:
        $ref: '#/definitions/example.MealHistory'
      message:
        example: Get meal successfully
        type: string
      status:
        example: success
        type: string
    type: object
  example.GetMealScanDetailResponse:
    properties:
      meal_scan_detail:
        $ref: '#/definitions/example.MealScanResponse'
      message:
        example: Get meal's scan detail successfully
        type: string
      status:
        example: success
        type: string
    type: object
  example.GetUserResponse:
    properties:
      message:
        example: Get user successfully
        type: string
      status:
        example: success
        type: string
      user:
        $ref: '#/definitions/example.User'
    type: object
  example.GetWeightHeightResponse:
    properties:
      data:
        $ref: '#/definitions/example.UsersWeightHeightHistory'
      message:
        example: Weight and height records fetched successfully
        type: string
      status:
        example: success
        type: string
    type: object
  example.GetWeightHeightTargetResponse:
    properties:
      data:
        $ref: '#/definitions/example.UsersWeightHeightTarget'
      message:
        example: Weight and height target records fetched successfully
        type: string
      status:
        example: success
        type: string
    type: object
  example.GoogleLoginResponse:
    properties:
      message:
        example: Login successfully
        type: string
      status:
        example: success
        type: string
      tokens:
        $ref: '#/definitions/example.Tokens'
      user:
        $ref: '#/definitions/example.GoogleUser'
    type: object
  example.GoogleUser:
    properties:
      activity_level:
        example: Medium
        type: string
      birth_date:
        example: "2000-01-01T00:00:00Z"
        type: string
      email:
        example: fake@example.com
        type: string
      gender:
        example: Male
        type: string
      height:
        example: 175.5
        type: number
      id:
        example: e088d183-9eea-4a11-8d5d-74d7ec91bdf5
        type: string
      medical_history:
        example: No known allergies
        type: string
      name:
        example: fake name
        type: string
      role:
        example: user
        type: string
      verified_email:
        example: true
        type: boolean
      weight:
        example: 65.2
        type: number
    type: object
  example.HealthCheck:
    properties:
      is_up:
        example: true
        type: boolean
      name:
        example: Postgre
        type: string
      status:
        example: Up
        type: string
    type: object
  example.HealthCheckError:
    properties:
      is_up:
        example: false
        type: boolean
      message:
        example: 'failed to connect to ''host=localhost user=postgres database=wrongdb'':
          server error (FATAL: database "wrongdb" does not exist (SQLSTATE 3D000))'
        type: string
      name:
        example: Postgre
        type: string
      status:
        example: Down
        type: string
    type: object
  example.HealthCheckResponse:
    properties:
      is_healthy:
        example: true
        type: boolean
      message:
        example: Health check completed
        type: string
      result:
        items:
          $ref: '#/definitions/example.HealthCheck'
        type: array
      status:
        example: success
        type: string
    type: object
  example.HealthCheckResponseError:
    properties:
      is_healthy:
        example: false
        type: boolean
      message:
        example: Health check completed
        type: string
      result:
        items:
          $ref: '#/definitions/example.HealthCheckError'
        type: array
      status:
        example: error
        type: string
    type: object
  example.HeightStat:
    properties:
      height:
        example: 170
        type: number
      recorded_at:
        example: "2023-10-10T08:00:00Z"
        type: string
    type: object
  example.HomeStatistics:
    properties:
      daily_nutrition:
        $ref: '#/definitions/example.DailyNutrition'
      weight_height_statistics:
        $ref: '#/definitions/example.WeightHeightStatistics'
    type: object
  example.JSONData:
    additionalProperties: true
    type: object
  example.LoginResponse:
    properties:
      message:
        example: Login successfully
        type: string
      status:
        example: success
        type: string
      tokens:
        $ref: '#/definitions/example.Tokens'
      user:
        $ref: '#/definitions/example.User'
    type: object
  example.LogoutResponse:
    properties:
      message:
        example: Logout successfully
        type: string
      status:
        example: success
        type: string
    type: object
  example.MealHistory:
    properties:
      calories:
        example: 250.5
        type: number
      carbs:
        example: 45.3
        type: number
      fat:
        example: 10.1
        type: number
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      label:
        example: Lunch
        type: string
      meal_time:
        example: "2023-10-01T12:00:00Z"
        type: string
      protein:
        example: 30.2
        type: number
      title:
        example: Scanned Meal
        type: string
      user_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  example.MealScanResponse:
    properties:
      foods:
        example:
        - chicken
        - rice
        - salad
        items:
          type: string
        type: array
      message:
        example: Meal scanned successfully
        type: string
      nutrient:
        $ref: '#/definitions/example.Nutrient'
      status:
        example: success
        type: string
    type: object
  example.NotFound:
    properties:
      message:
        example: Not found
        type: string
      status:
        example: error
        type: string
    type: object
  example.Nutrient:
    properties:
      calories:
        $ref: '#/definitions/example.NutrientDetail'
      carbs:
        $ref: '#/definitions/example.NutrientDetail'
      fat:
        $ref: '#/definitions/example.NutrientDetail'
      protein:
        $ref: '#/definitions/example.NutrientDetail'
    type: object
  example.NutrientDetail:
    properties:
      quantity:
        example: 250.5
        type: number
      unit:
        example: kcal
        type: string
    type: object
  example.ProductTokenResponse:
    properties:
      activated_at:
        example: "2025-04-20T14:30:00Z"
        type: string
      created_at:
        example: "2025-04-01T10:00:00Z"
        type: string
      created_by:
        $ref: '#/definitions/example.SimpleUser'
      created_by_id:
        example: b1c2d3e4-f5g6-h7i8-j9k0-l1m2n3o4p5q6
        type: string
      id:
        example: e088d183-9eea-4a11-8d5d-74d7ec91bdf5
        type: string
      is_active:
        example: true
        type: boolean
      token:
        example: abc123def456ghi789
        type: string
      updated_at:
        example: "2025-04-01T10:00:00Z"
        type: string
      user:
        $ref: '#/definitions/example.SimpleUser'
      user_id:
        example: a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6
        type: string
    type: object
  example.RefreshToken:
    properties:
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        type: string
    type: object
  example.RefreshTokenResponse:
    properties:
      status:
        example: success
        type: string
      tokens:
        $ref: '#/definitions/example.Tokens'
    type: object
  example.RegisterResponse:
    properties:
      message:
        example: Register successfully
        type: string
      status:
        example: success
        type: string
      tokens:
        $ref: '#/definitions/example.Tokens'
      user:
        $ref: '#/definitions/example.User'
    type: object
  example.ResetPasswordResponse:
    properties:
      message:
        example: Update password successfully
        type: string
      status:
        example: success
        type: string
    type: object
  example.SendVerificationEmailResponse:
    properties:
      message:
        example: Please check your email for a link to verify your account
        type: string
      status:
        example: success
        type: string
    type: object
  example.SimpleUser:
    properties:
      email:
        example: john.doe@example.com
        type: string
      id:
        example: e088d183-9eea-4a11-8d5d-74d7ec91bdf5
        type: string
      name:
        example: John Doe
        type: string
      role:
        example: user
        type: string
      verified_email:
        example: true
        type: boolean
    type: object
  example.SubscriptionPlanResponse:
    properties:
      ai_scan_limit:
        type: integer
      description:
        example: Paket best seller dengan fitur lengkap
        type: string
      features:
        $ref: '#/definitions/example.FeatureFlags'
      id:
        example: a1b2c3d4-e5f6-7890
        type: string
      name:
        example: Paket Sehat
        type: string
      price:
        type: integer
      price_formatted:
        example: Rp 30.000
        type: string
      validity_days:
        type: integer
    type: object
  example.SuccessWithPaginateUsers:
    properties:
      limit:
        example: 10
        type: integer
      message:
        example: Get all users successfully
        type: string
      page:
        example: 1
        type: integer
      results:
        items:
          $ref: '#/definitions/example.SimpleUser'
        type: array
      status:
        example: success
        type: string
      total_pages:
        example: 5
        type: integer
      total_results:
        example: 42
        type: integer
    type: object
  example.TokenExpires:
    properties:
      expires:
        example: "2024-10-07T11:56:46.618180553Z"
        type: string
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        type: string
    type: object
  example.Tokens:
    properties:
      access:
        $ref: '#/definitions/example.TokenExpires'
      refresh:
        $ref: '#/definitions/example.TokenExpires'
    type: object
  example.TransactionDetailResponse:
    properties:
      acquirer:
        type: string
      approval_code:
        type: string
      bank:
        type: string
      bill_key:
        type: string
      biller_code:
        type: string
      card_type:
        type: string
      channel_response_code:
        type: string
      channel_response_message:
        type: string
      created_at:
        type: string
      currency:
        type: string
      eci:
        type: string
      fraud_status:
        type: string
      gross_amount:
        type: string
      id:
        type: string
      issuer:
        description: E-wallet specific fields
        type: string
      masked_card:
        description: Credit Card specific fields
        type: string
      order_id:
        type: string
      payment_amounts:
        $ref: '#/definitions/example.JSONData'
      payment_code:
        type: string
      payment_type:
        type: string
      permata_va_number:
        type: string
      raw_response:
        allOf:
        - $ref: '#/definitions/example.JSONData'
        description: Raw response for debugging
      settlement_time:
        description: Settlement info
        type: string
      status_code:
        type: string
      status_message:
        type: string
      store:
        description: Store specific fields
        type: string
      transaction_id:
        type: string
      transaction_status:
        type: string
      transaction_time:
        type: string
      user_subscription_id:
        type: string
      va_numbers:
        allOf:
        - $ref: '#/definitions/example.JSONData'
        description: Bank Transfer specific fields
    type: object
  example.TransactionsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/example.TransactionDetailResponse'
        type: array
      limit:
        type: integer
      message:
        type: string
      page:
        type: integer
      status:
        type: string
      total_pages:
        type: integer
      total_results:
        type: integer
    type: object
  example.Unauthorized:
    properties:
      message:
        example: Please authenticate
        type: string
      status:
        example: error
        type: string
    type: object
  example.UpdateArticleRequest:
    properties:
      category_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      content:
        example: Updated content of my article
        type: string
      image:
        example: https://example.com/new-image.jpg
        type: string
      published_at:
        example: "2023-10-11T12:00:00Z"
        type: string
      slug:
        example: updated-article-slug
        type: string
      title:
        example: Updated Article Title
        type: string
    type: object
  example.UpdateMealRequest:
    properties:
      calories:
        example: 550
        type: number
      carbs:
        example: 65
        type: number
      fat:
        example: 18
        type: number
      label:
        example: Dinner
        type: string
      meal_time:
        example: "2023-10-10T12:30:00Z"
        type: string
      protein:
        example: 25
        type: number
      title:
        example: Nasi Goreng Spesial
        type: string
    type: object
  example.UpdateMealResponse:
    properties:
      meal:
        $ref: '#/definitions/example.MealHistory'
      message:
        example: Meal updated successfully
        type: string
      status:
        example: success
        type: string
    type: object
  example.UpdateRecipeRequest:
    properties:
      day:
        example: tuesday
        type: string
      description:
        example: Nasi goreng dengan bumbu premium
        type: string
      image:
        example: https://example.com/nasi-goreng-premium.jpg
        type: string
      ingredients:
        example: Nasi, telur, bawang, kecap, ayam
        type: string
      instructions:
        example: 1. Tumis bawang... 2. Masukkan ayam...
        type: string
      label:
        example: Special Menu
        type: string
      name:
        example: Nasi Goreng Premium
        type: string
      slug:
        example: nasi-goreng-premium
        type: string
    type: object
  example.UpdateUserResponse:
    properties:
      message:
        example: Update user successfully
        type: string
      status:
        example: success
        type: string
      user:
        $ref: '#/definitions/example.User'
    type: object
  example.UpdateWeightHeightRequest:
    properties:
      height:
        example: 175
        type: number
      recorded_at:
        example: "2023-10-10T12:00:00Z"
        type: string
      weight:
        example: 70.5
        type: number
    type: object
  example.UpdateWeightHeightResponse:
    properties:
      data:
        $ref: '#/definitions/example.UsersWeightHeightHistory'
      message:
        example: Weight and height record updated successfully
        type: string
      status:
        example: success
        type: string
    type: object
  example.UpdateWeightHeightTargetRequest:
    properties:
      height:
        example: 175
        type: number
      target_date:
        example: "2023-10-10T12:00:00Z"
        type: string
      weight:
        example: 70.5
        type: number
    type: object
  example.UpdateWeightHeightTargetResponse:
    properties:
      data:
        $ref: '#/definitions/example.UsersWeightHeightTarget'
      message:
        example: Weight and height record target updated successfully
        type: string
      status:
        example: success
        type: string
    type: object
  example.User:
    properties:
      activity_level:
        example: Medium
        type: string
      birth_date:
        example: "2000-01-01T00:00:00Z"
        type: string
      email:
        example: fake@example.com
        type: string
      gender:
        example: Male
        type: string
      height:
        example: 175.5
        type: number
      id:
        example: e088d183-9eea-4a11-8d5d-74d7ec91bdf5
        type: string
      medical_history:
        example: No known allergies
        type: string
      name:
        example: fake name
        type: string
      role:
        example: user
        type: string
      verified_email:
        example: false
        type: boolean
      weight:
        example: 65.2
        type: number
    type: object
  example.UserStatisticsResponse:
    properties:
      body:
        properties:
          calories:
            items:
              $ref: '#/definitions/example.CalorieStat'
            type: array
          heights:
            items:
              $ref: '#/definitions/example.HeightStat'
            type: array
          weights:
            items:
              $ref: '#/definitions/example.WeightStat'
            type: array
        type: object
    type: object
  example.UserSubscriptionResponse:
    properties:
      ai_scans_used:
        type: integer
      created_at:
        example: "2023-05-20T10:00:00Z"
        type: string
      end_date:
        example: "2023-06-19T10:00:00Z"
        type: string
      id:
        example: x1y2z3w4-v5u6-7890
        type: string
      is_active:
        type: boolean
      payment_method:
        example: gopay
        type: string
      plan:
        $ref: '#/definitions/example.SubscriptionPlanResponse'
      start_date:
        example: "2023-05-20T10:00:00Z"
        type: string
      user_id:
        example: u1u2u3u4-v5v6-7890
        type: string
    type: object
  example.UsersWeightHeightHistory:
    properties:
      height:
        example: 180.8
        type: number
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      recorded_at:
        example: "2023-10-01T12:00:00Z"
        type: string
      user_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      weight:
        example: 50.5
        type: number
    type: object
  example.UsersWeightHeightTarget:
    properties:
      height:
        example: 180.8
        type: number
      height_history:
        example: 180.8
        type: number
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      record_date:
        example: "2023-10-01T12:00:00Z"
        type: string
      target_date:
        example: "2023-10-01T12:00:00Z"
        type: string
      user_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      weight:
        example: 50.5
        type: number
      weight_history:
        example: 50.5
        type: number
    type: object
  example.VerifyEmailResponse:
    properties:
      message:
        example: Verify email successfully
        type: string
      status:
        example: success
        type: string
    type: object
  example.VerifyProductTokenResponse:
    properties:
      message:
        example: Verify product token successfully
        type: string
      status:
        example: success
        type: string
    type: object
  example.WeightHeightStatistics:
    properties:
      current_height:
        example: 178
        type: number
      current_weight:
        example: 75.5
        type: number
      latest_weight_target:
        $ref: '#/definitions/example.UsersWeightHeightTarget'
      weight_history:
        items:
          $ref: '#/definitions/example.UsersWeightHeightHistory'
        type: array
    type: object
  example.WeightStat:
    properties:
      recorded_at:
        example: "2023-10-10T08:00:00Z"
        type: string
      weight:
        example: 50
        type: number
    type: object
  model.ActivityLevel:
    enum:
    - Light
    - Medium
    - Heavy
    type: string
    x-enum-varnames:
    - Light
    - Medium
    - Heavy
  model.ArticleCategory:
    properties:
      id:
        type: string
      name:
        type: string
      user_id:
        type: string
    type: object
  model.ArticleResponse:
    properties:
      category_id:
        type: string
      category_name:
        type: string
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      image:
        type: string
      published_at:
        type: string
      slug:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  model.BahanMakanan:
    properties:
      abu_g:
        type: number
      air_g:
        type: number
      bdd_persen:
        type: number
      besi_fe_mg:
        type: number
      beta_karoten_mcg:
        type: number
      energi_kal:
        type: number
      fosfor_p_mg:
        type: number
      id:
        type: integer
      kalium_ka_mg:
        type: number
      kalsium_ca_mg:
        type: number
      karbohidrat_g:
        type: number
      karoten_total_mcg:
        type: number
      kelompok_makanan:
        type: string
      kode:
        type: string
      lemak_g:
        type: number
      mentah_olahan:
        type: string
      nama_bahan_makanan:
        type: string
      natrium_na_mg:
        type: number
      niasin_mg:
        type: number
      protein_g:
        type: number
      retinol_vit_a_mcg:
        type: number
      riboflavin_vit_b2_mg:
        type: number
      seng_zn_mg:
        type: number
      serat_g:
        type: number
      tembaga_cu_mg:
        type: number
      thiamin_vit_b1_mg:
        type: number
      vitamin_c_mg:
        type: number
    type: object
  model.GenderType:
    enum:
    - Male
    - Female
    type: string
    x-enum-varnames:
    - Male
    - Female
  model.LoginStreakData:
    properties:
      current_streak:
        type: integer
      longest_streak:
        type: integer
      weekly_streak:
        items:
          $ref: '#/definitions/model.LoginStreakDayInfo'
        type: array
    type: object
  model.LoginStreakDayInfo:
    properties:
      date:
        type: string
      day_of_week:
        description: 1 = Monday, ..., 7 = Sunday
        type: integer
      has_login:
        type: boolean
    type: object
  model.PaymentResponse:
    properties:
      order_id:
        type: string
      redirect_url:
        type: string
      transaction_token:
        type: string
    type: object
  model.ProductToken:
    properties:
      activated_at:
        type: string
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/model.User'
      created_by_id:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      subscription_plan:
        $ref: '#/definitions/model.SubscriptionPlan'
      subscription_plan_id:
        type: string
      token:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/model.User'
      user_id:
        type: string
    type: object
  model.PurchaseSubscriptionRequest:
    properties:
      payment_method:
        enum:
        - gopay
        - shopeepay
        - bank_transfer
        - credit_card
        type: string
    type: object
  model.Recipe:
    properties:
      day:
        type: string
      description:
        type: string
      id:
        type: string
      image:
        type: string
      ingredients:
        type: string
      instructions:
        type: string
      label:
        type: string
      name:
        type: string
      slug:
        type: string
      user_id:
        type: string
    type: object
  model.SubscriptionPlan:
    properties:
      aiscanLimit:
        description: -1 for unlimited
        type: integer
      createdAt:
        type: string
      description:
        type: string
      features:
        type: string
      id:
        type: string
      isActive:
        type: boolean
      name:
        type: string
      price:
        description: in Rupiah
        type: integer
      validityDays:
        description: in days
        type: integer
    type: object
  model.SubscriptionPlanResponse:
    properties:
      ai_scan_limit:
        type: integer
      description:
        type: string
      features:
        additionalProperties:
          type: boolean
        type: object
      id:
        type: string
      is_recommended:
        type: boolean
      name:
        type: string
      price:
        type: integer
      price_formatted:
        type: string
      validity_days:
        type: integer
    type: object
  model.User:
    properties:
      activity_level:
        $ref: '#/definitions/model.ActivityLevel'
      birth_date:
        type: string
      email:
        type: string
      gender:
        $ref: '#/definitions/model.GenderType'
      google_id_token:
        type: string
      height:
        type: number
      id:
        type: string
      medical_history:
        type: string
      name:
        type: string
      phone:
        type: string
      profile_picture:
        type: string
      role:
        type: string
      verified_email:
        type: boolean
      weight:
        type: number
    type: object
  model.UserSubscriptionResponse:
    properties:
      ai_scans_used:
        type: integer
      created_at:
        type: string
      end_date:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      payment_method:
        type: string
      payment_status:
        type: string
      plan:
        $ref: '#/definitions/model.SubscriptionPlanResponse'
      start_date:
        type: string
      user_id:
        type: string
    type: object
  response.Common:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  response.CommonResponse:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  response.ErrorResponse:
    properties:
      errors: {}
      message:
        type: string
      status:
        type: string
    type: object
  response.FeatureAccessResponse:
    properties:
      data:
        $ref: '#/definitions/response.FeatureData'
      message:
        type: string
      status:
        type: string
    type: object
  response.FeatureData:
    properties:
      access:
        type: boolean
      feature:
        type: string
    type: object
  response.PaymentResponse:
    properties:
      data:
        $ref: '#/definitions/model.PaymentResponse'
      message:
        type: string
      status:
        type: string
    type: object
  response.SubscriptionPlanResponse:
    properties:
      ai_scan_limit:
        type: integer
      description:
        type: string
      features:
        additionalProperties:
          type: boolean
        type: object
      id:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      price:
        type: integer
      price_formatted:
        type: string
      validity_days:
        type: integer
    type: object
  response.SubscriptionPlansResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.SubscriptionPlanResponse'
        type: array
      message:
        type: string
      status:
        type: string
    type: object
  response.SuccessWithArticle:
    properties:
      data:
        $ref: '#/definitions/model.ArticleResponse'
      message:
        type: string
      status:
        type: string
    type: object
  response.SuccessWithArticleCategory:
    properties:
      data:
        $ref: '#/definitions/model.ArticleCategory'
      message:
        type: string
      status:
        type: string
    type: object
  response.SuccessWithArticleCategoryList:
    properties:
      data:
        items:
          $ref: '#/definitions/model.ArticleCategory'
        type: array
      message:
        type: string
      status:
        type: string
    type: object
  response.SuccessWithArticleList:
    properties:
      data:
        items:
          $ref: '#/definitions/model.ArticleResponse'
        type: array
      message:
        type: string
      status:
        type: string
    type: object
  response.SuccessWithBahanMakanan:
    properties:
      data:
        $ref: '#/definitions/model.BahanMakanan'
      message:
        type: string
      status:
        type: string
    type: object
  response.SuccessWithBahanMakananList:
    properties:
      data:
        items:
          $ref: '#/definitions/model.BahanMakanan'
        type: array
      message:
        type: string
      status:
        type: string
    type: object
  response.SuccessWithLoginStreak:
    properties:
      data:
        $ref: '#/definitions/model.LoginStreakData'
      message:
        example: Login streak retrieved successfully
        type: string
      status:
        example: success
        type: string
    type: object
  response.SuccessWithPaginateSubscriptions:
    properties:
      limit:
        type: integer
      message:
        type: string
      page:
        type: integer
      results:
        items:
          $ref: '#/definitions/model.UserSubscriptionResponse'
        type: array
      status:
        type: string
      total_pages:
        type: integer
      total_results:
        type: integer
    type: object
  response.SuccessWithProductToken:
    properties:
      data:
        $ref: '#/definitions/model.ProductToken'
      message:
        type: string
      status:
        type: string
    type: object
  response.SuccessWithRecipe:
    properties:
      data:
        $ref: '#/definitions/model.Recipe'
      message:
        type: string
      status:
        type: string
    type: object
  response.SuccessWithRecipeList:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Recipe'
        type: array
      message:
        type: string
      status:
        type: string
    type: object
  response.SuccessWithSubscription:
    properties:
      data:
        $ref: '#/definitions/model.UserSubscriptionResponse'
      message:
        type: string
      status:
        type: string
    type: object
  response.SuccessWithSubscriptionPlan:
    properties:
      data:
        $ref: '#/definitions/response.SubscriptionPlanResponse'
      message:
        type: string
      status:
        type: string
    type: object
  response.SuccessWithUser:
    properties:
      message:
        type: string
      status:
        type: string
      user:
        $ref: '#/definitions/model.User'
    type: object
  response.UserSubscriptionResponse:
    properties:
      data:
        $ref: '#/definitions/model.UserSubscriptionResponse'
      message:
        type: string
      status:
        type: string
    type: object
  validation.CreateCustomToken:
    properties:
      is_active:
        type: boolean
      subscription_plan_id:
        type: string
      token:
        maxLength: 32
        minLength: 5
        type: string
    required:
    - token
    type: object
  validation.CreateUser:
    properties:
      email:
        example: fake@example.com
        maxLength: 50
        type: string
      name:
        example: fake name
        maxLength: 50
        type: string
      password:
        example: password1
        maxLength: 20
        minLength: 8
        type: string
      role:
        enum:
        - user
        - admin
        example: user
        maxLength: 50
        type: string
    required:
    - email
    - name
    - password
    - role
    type: object
  validation.ForgotPassword:
    properties:
      email:
        example: fake@example.com
        maxLength: 50
        type: string
    required:
    - email
    type: object
  validation.Login:
    properties:
      email:
        example: fake@example.com
        maxLength: 50
        type: string
      password:
        example: password1
        maxLength: 20
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  validation.Register:
    properties:
      activity_level:
        allOf:
        - $ref: '#/definitions/model.ActivityLevel'
        enum:
        - Light
        - Medium
        - Heavy
        example: Medium
      birth_date:
        example: "2000-01-01T00:00:00Z"
        type: string
      email:
        example: fake@example.com
        maxLength: 50
        type: string
      gender:
        allOf:
        - $ref: '#/definitions/model.GenderType'
        enum:
        - Male
        - Female
        example: Male
      height:
        example: 170.5
        type: number
      medical_history:
        example: No known medical issues
        maxLength: 1000
        type: string
      name:
        example: fake name
        maxLength: 50
        type: string
      password:
        example: password1
        maxLength: 20
        minLength: 8
        type: string
      weight:
        example: 65.5
        type: number
    required:
    - activity_level
    - birth_date
    - email
    - gender
    - height
    - name
    - password
    - weight
    type: object
  validation.UpdatePassOrVerify:
    properties:
      password:
        example: password1
        maxLength: 20
        minLength: 8
        type: string
    type: object
  validation.UpdatePaymentStatus:
    properties:
      status:
        enum:
        - pending
        - success
        - failed
        type: string
    required:
    - status
    type: object
  validation.UpdateProductToken:
    properties:
      is_active:
        type: boolean
      subscription_plan_id:
        description: Allow empty string to clear the plan
        type: string
      token:
        maxLength: 32
        minLength: 5
        type: string
    type: object
  validation.UpdateSubscription:
    properties:
      ai_scans_used:
        minimum: 0
        type: integer
      end_date:
        type: string
      is_active:
        type: boolean
      payment_method:
        type: string
      plan_id:
        type: string
      start_date:
        type: string
    type: object
  validation.UpdateSubscriptionPlan:
    properties:
      ai_scan_limit:
        minimum: 1
        type: integer
      description:
        type: string
      features:
        additionalProperties:
          type: boolean
        type: object
      is_active:
        type: boolean
      name:
        maxLength: 50
        minLength: 2
        type: string
      price:
        minimum: 1
        type: integer
      validity_days:
        minimum: 1
        type: integer
    type: object
  validation.UpdateUser:
    properties:
      activity_level:
        allOf:
        - $ref: '#/definitions/model.ActivityLevel'
        enum:
        - Light
        - Medium
        - Heavy
        example: Medium
      birth_date:
        type: string
      email:
        example: fake@example.com
        maxLength: 50
        type: string
      gender:
        allOf:
        - $ref: '#/definitions/model.GenderType'
        enum:
        - Male
        - Female
        example: Male
      height:
        example: 175.5
        maximum: 300
        minimum: 0
        type: number
      medical_history:
        example: No known allergies
        maxLength: 1000
        type: string
      name:
        example: fake name
        maxLength: 50
        type: string
      password:
        example: password1
        maxLength: 20
        minLength: 8
        type: string
      profile_picture:
        example: https://example.com/image.jpg
        type: string
      weight:
        example: 70.3
        maximum: 500
        minimum: 0
        type: number
    type: object
host: localhost:5000
info:
  contact: {}
  license:
    name: MIT
    url: https://github.com/indrayyana/go-fiber-boilerplate/blob/main/LICENSE
  title: Nutribox API documentation
  version: 1.0.0
paths:
  /admin/product-tokens:
    get:
      description: Returns a list of all product tokens with their activation status
      parameters:
      - description: Include user data
        in: query
        name: with_user
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.GetAllProductTokensResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all product tokens
      tags:
      - Admin
    post:
      consumes:
      - application/json
      description: Creates a new custom product token that can be used by users. Optionally,
        a `subscription_plan_id` can be provided to grant a subscription when the
        token is verified.
      parameters:
      - description: Product token details (token, is_active, subscription_plan_id)
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/validation.CreateCustomToken'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/example.CreateProductTokenResponse'
        "400":
          description: Invalid request or token already exists
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create new product token
      tags:
      - Admin
  /admin/product-tokens/{id}:
    delete:
      description: Deletes a product token by ID
      parameters:
      - description: Product token ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Common'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete product token
      tags:
      - Admin
    put:
      consumes:
      - application/json
      description: Updates an existing product token. Fields to update (token, is_active,
        subscription_plan_id) should be provided in the request body. To remove a
        subscription plan, pass an empty string for `subscription_plan_id`.
      parameters:
      - description: Product token ID
        in: path
        name: id
        required: true
        type: string
      - description: Product token details to update
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/validation.UpdateProductToken'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithProductToken'
        "400":
          description: Invalid request, token already exists, or invalid SubscriptionPlanID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Product token or Subscription Plan not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update product token
      tags:
      - Admin
  /admin/subscription-plans:
    get:
      description: Returns a list of all subscription plans with their users
      parameters:
      - description: Include users for each plan
        in: query
        name: with_users
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.AdminSubscriptionPlansResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all subscription plans
      tags:
      - Admin
  /admin/subscription-plans/{plan_id}:
    get:
      description: Returns details of a specific subscription plan
      parameters:
      - description: Plan ID
        in: path
        name: plan_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithSubscriptionPlan'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get subscription plan details
      tags:
      - Admin
    patch:
      consumes:
      - application/json
      description: Updates a subscription plan (name, price, features, etc.)
      parameters:
      - description: Plan ID
        in: path
        name: plan_id
        required: true
        type: string
      - description: Update plan data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/validation.UpdateSubscriptionPlan'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithSubscriptionPlan'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update subscription plan
      tags:
      - Admin
  /admin/subscriptions:
    get:
      description: Returns a list of all user subscriptions with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Maximum number of subscriptions
        in: query
        name: limit
        type: integer
      - description: Filter by status (active, expired, pending)
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithPaginateSubscriptions'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all user subscriptions
      tags:
      - Admin
  /admin/subscriptions/{subscription_id}:
    delete:
      description: Deletes a user subscription
      parameters:
      - description: Subscription ID
        in: path
        name: subscription_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Common'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user subscription
      tags:
      - Admin
    get:
      description: Returns details of a specific user subscription
      parameters:
      - description: Subscription ID
        in: path
        name: subscription_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithSubscription'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user subscription details
      tags:
      - Admin
    patch:
      consumes:
      - application/json
      description: Updates a user subscription (plan, status, etc.)
      parameters:
      - description: Subscription ID
        in: path
        name: subscription_id
        required: true
        type: string
      - description: Update subscription data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/validation.UpdateSubscription'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithSubscription'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user subscription
      tags:
      - Admin
  /admin/subscriptions/{subscription_id}/payment-status:
    patch:
      consumes:
      - application/json
      description: Updates the payment status of a user subscription
      parameters:
      - description: Subscription ID
        in: path
        name: subscription_id
        required: true
        type: string
      - description: Update payment status data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/validation.UpdatePaymentStatus'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithSubscription'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update payment status
      tags:
      - Admin
  /admin/subscriptions/{subscription_id}/transactions:
    get:
      description: Returns transaction logs for a specific user subscription
      parameters:
      - description: Subscription ID
        in: path
        name: subscription_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.TransactionsResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get transaction logs
      tags:
      - Admin
  /admin/transactions:
    get:
      description: Returns a list of all transaction logs with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Maximum number of transactions
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.TransactionsResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all transaction logs
      tags:
      - Admin
  /admin/transactions/{id}:
    get:
      description: Returns details of a specific transaction
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.TransactionDetailResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get transaction details
      tags:
      - Admin
  /admin/users:
    get:
      description: Admin endpoint to retrieve all users with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Maximum number of users
        in: query
        name: limit
        type: integer
      - description: Search by name or email or role
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.SuccessWithPaginateUsers'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - Admin
  /admin/users/{id}:
    get:
      description: Admin endpoint to get detailed user information
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithUser'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user details
      tags:
      - Admin
    patch:
      consumes:
      - application/json
      description: Admin endpoint to update user information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Update user data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/validation.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithUser'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - Admin
  /article-categories:
    get:
      description: Get all article categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithArticleCategoryList'
      security:
      - BearerAuth: []
      summary: Get all article categories
      tags:
      - Article Categories
    post:
      consumes:
      - application/json
      description: Create new article category
      parameters:
      - description: Category data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/example.CreateArticleCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.SuccessWithArticleCategory'
      security:
      - BearerAuth: []
      summary: Create new article category
      tags:
      - Article Categories
  /article-categories/{id}:
    delete:
      description: Delete article category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Common'
      security:
      - BearerAuth: []
      summary: Delete article category
      tags:
      - Article Categories
  /articles:
    get:
      description: Get all articles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithArticleList'
      security:
      - BearerAuth: []
      summary: Get all articles
      tags:
      - Articles
    post:
      consumes:
      - application/json
      description: Create new article
      parameters:
      - description: Article data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/example.CreateArticleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.SuccessWithArticle'
      security:
      - BearerAuth: []
      summary: Create new article
      tags:
      - Articles
  /articles/{id}:
    delete:
      description: Delete article
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Common'
      security:
      - BearerAuth: []
      summary: Delete article
      tags:
      - Articles
    get:
      description: Get article by ID
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithArticle'
      security:
      - BearerAuth: []
      summary: Get article by ID
      tags:
      - Articles
    put:
      consumes:
      - application/json
      description: Update article
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: string
      - description: Article data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/example.UpdateArticleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithArticle'
      security:
      - BearerAuth: []
      summary: Update article
      tags:
      - Articles
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: An email will be sent to reset password.
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/validation.ForgotPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.ForgotPasswordResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/example.NotFound'
      summary: Forgot password
      tags:
      - Auth
  /auth/google:
    get:
      consumes:
      - application/json
      description: Login user using Google OAuth2 and return authentication tokens.
      parameters:
      - description: Google ID Token
        in: query
        name: id_token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.GoogleLoginResponse'
      summary: Login with Google
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/validation.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.LoginResponse'
        "401":
          description: Invalid email or password
          schema:
            $ref: '#/definitions/example.FailedLogin'
      summary: Login
      tags:
      - Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/example.RefreshToken'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.LogoutResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/example.NotFound'
      summary: Logout
      tags:
      - Auth
  /auth/refresh-tokens:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/example.RefreshToken'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.RefreshTokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/example.Unauthorized'
      summary: Refresh auth tokens
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user. User will receive verification email to start
        2-week free trial after registration.
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/validation.Register'
      produces:
      - application/json
      responses:
        "201":
          description: Registration successful. Check email for verification link
            to start 2-week free trial.
          schema:
            $ref: '#/definitions/example.RegisterResponse'
        "400":
          description: Invalid request body
          schema:
            type: string
        "409":
          description: Email already taken
          schema:
            $ref: '#/definitions/example.DuplicateEmail'
      summary: Register as user
      tags:
      - Auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      parameters:
      - description: The reset password token
        in: query
        name: token
        required: true
        type: string
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/validation.UpdatePassOrVerify'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.ResetPasswordResponse'
        "401":
          description: Password reset failed
          schema:
            $ref: '#/definitions/example.FailedResetPassword'
      summary: Reset password
      tags:
      - Auth
  /auth/send-verification-email:
    post:
      description: An email will be sent to verify email.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.SendVerificationEmailResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/example.Unauthorized'
      security:
      - BearerAuth: []
      summary: Send verification email
      tags:
      - Auth
  /auth/verify-email:
    post:
      description: Verify user email and automatically create 2-week free trial with
        full access to all features.
      parameters:
      - description: The verify email token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Email verified successfully. 2-week free trial activated with
            full access.
          schema:
            $ref: '#/definitions/example.VerifyEmailResponse'
        "401":
          description: Verify email failed - invalid or expired token
          schema:
            $ref: '#/definitions/example.FailedVerifyEmail'
      summary: Verify email
      tags:
      - Auth
  /bahan-makanan:
    get:
      description: Get all bahan makanan
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithBahanMakananList'
      security:
      - BearerAuth: []
      summary: Get all bahan makanan
      tags:
      - BahanMakanan
  /bahan-makanan/{id}:
    get:
      description: Get bahan makanan by ID
      parameters:
      - description: Bahan Makanan ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithBahanMakanan'
      security:
      - BearerAuth: []
      summary: Get bahan makanan by ID
      tags:
      - BahanMakanan
    put:
      consumes:
      - application/json
      description: Update bahan makanan
      parameters:
      - description: Bahan Makanan ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bahan Makanan data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.BahanMakanan'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithBahanMakanan'
      security:
      - BearerAuth: []
      summary: Update bahan makanan
      tags:
      - BahanMakanan
  /bahan-makanan/kelompok/{kelompok}:
    get:
      description: Get bahan makanan by kelompok makanan
      parameters:
      - description: Kelompok Makanan
        in: path
        name: kelompok
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithBahanMakananList'
      security:
      - BearerAuth: []
      summary: Get bahan makanan by kelompok
      tags:
      - BahanMakanan
  /bahan-makanan/kode/{kode}:
    get:
      description: Get bahan makanan by kode
      parameters:
      - description: Kode Bahan Makanan
        in: path
        name: kode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithBahanMakanan'
      security:
      - BearerAuth: []
      summary: Get bahan makanan by kode
      tags:
      - BahanMakanan
  /bahan-makanan/mentah-olahan/{mentah_olahan}:
    get:
      description: Get bahan makanan by mentah olahan status
      parameters:
      - description: Mentah/Olahan Status
        in: path
        name: mentah_olahan
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithBahanMakananList'
      security:
      - BearerAuth: []
      summary: Get bahan makanan by mentah olahan
      tags:
      - BahanMakanan
  /health-check:
    get:
      consumes:
      - application/json
      description: Check the status of services and database connections
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.HealthCheckResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/example.HealthCheckResponseError'
      summary: Health Check
      tags:
      - Health
  /home/statistic:
    get:
      description: Logged in users can fetch their home statistics including today's
        consumed calories and weight/height info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.GetHomeStatisticsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/example.Unauthorized'
      security:
      - BearerAuth: []
      summary: Get home statistics
      tags:
      - Statistics
  /meals:
    get:
      description: Logged in users can fetch only their own meals information.
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Maximum number of meals per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.GetAllMealsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/example.Unauthorized'
      security:
      - BearerAuth: []
      summary: Get a user's meals
      tags:
      - Meals
    post:
      consumes:
      - application/json
      description: Logged in users can add a new meal.
      parameters:
      - description: Meal data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/example.AddMealRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/example.AddMealResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/example.Unauthorized'
      security:
      - BearerAuth: []
      summary: Add a new meal
      tags:
      - Meals
  /meals/{id}:
    delete:
      description: Logged in users can delete their own meal. Only admins can delete
        other user's meal.
      parameters:
      - description: Meal ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.DeleteMealResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/example.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/example.Forbidden'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/example.NotFound'
      security:
      - BearerAuth: []
      summary: Delete a meal
      tags:
      - Meals
    get:
      description: Logged in users can fetch only their own meal detail information.
        Only admins can fetch other user's meal.
      parameters:
      - description: Meal id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.GetMealResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/example.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/example.Forbidden'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/example.NotFound'
      security:
      - BearerAuth: []
      summary: Get a meal
      tags:
      - Meals
    put:
      consumes:
      - application/json
      description: Logged in users can update their own meal. Only admins can update
        other user's meal.
      parameters:
      - description: Meal ID
        in: path
        name: id
        required: true
        type: string
      - description: Meal data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/example.UpdateMealRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.UpdateMealResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/example.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/example.Forbidden'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/example.NotFound'
      security:
      - BearerAuth: []
      summary: Update a meal
      tags:
      - Meals
  /meals/{id}/scan-detail:
    get:
      description: Logged in users can fetch only their own meal's scan detail detail
        information. Only admins can fetch other user's meal's scan detail.
      parameters:
      - description: Meal id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.GetMealScanDetailResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/example.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/example.Forbidden'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/example.NotFound'
      security:
      - BearerAuth: []
      summary: Get a meal's scan detail
      tags:
      - Meals
  /meals/{mealId}/scan-detail:
    post:
      consumes:
      - application/json
      description: Logged in users can add a new meal's scan detail.
      parameters:
      - description: Meal ID
        in: path
        name: mealId
        required: true
        type: string
      - description: Meal's scan detail data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/example.AddMealScanDetailRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/example.AddMealScanDetailResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/example.Unauthorized'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/example.NotFound'
      security:
      - BearerAuth: []
      summary: Add a new meal's scan detail
      tags:
      - Meals
  /meals/scan:
    post:
      consumes:
      - multipart/form-data
      description: Only users who already logged in and had product token verified
        can scan a meal an get the nutritions
      parameters:
      - description: Meal's image
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.MealScanResponse'
      security:
      - BearerAuth: []
      summary: Scan a meal
      tags:
      - Meals
  /product-token/verify:
    post:
      parameters:
      - description: The product token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.VerifyProductTokenResponse'
        "404":
          description: Invalid or already used product token
          schema:
            $ref: '#/definitions/example.FailedVerifyProductToken'
      security:
      - BearerAuth: []
      summary: Verify Product Token
      tags:
      - Product Token
  /recipes:
    get:
      description: Get all recipes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithRecipeList'
      security:
      - BearerAuth: []
      summary: Get all recipes
      tags:
      - Recipes
    post:
      consumes:
      - application/json
      description: Create new recipe
      parameters:
      - description: Recipe data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/example.CreateRecipeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.SuccessWithRecipe'
      security:
      - BearerAuth: []
      summary: Create new recipe
      tags:
      - Recipes
  /recipes/{id}:
    delete:
      description: Delete recipe
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Common'
      security:
      - BearerAuth: []
      summary: Delete recipe
      tags:
      - Recipes
    get:
      description: Get recipe by ID
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithRecipe'
      security:
      - BearerAuth: []
      summary: Get recipe by ID
      tags:
      - Recipes
    put:
      consumes:
      - application/json
      description: Update recipe
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: string
      - description: Recipe data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/example.UpdateRecipeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithRecipe'
      security:
      - BearerAuth: []
      summary: Update recipe
      tags:
      - Recipes
  /subscriptions/check-feature:
    get:
      description: Check if user has access to a feature
      parameters:
      - description: Feature name
        in: query
        name: feature
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.FeatureAccessResponse'
      security:
      - BearerAuth: []
      summary: Check feature access
      tags:
      - Subscription
  /subscriptions/me:
    get:
      description: Get user's active subscription
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.UserSubscriptionResponse'
      security:
      - BearerAuth: []
      summary: Get current subscription
      tags:
      - Subscription
  /subscriptions/notification:
    post:
      consumes:
      - application/json
      description: Handle payment notification from Midtrans
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Common'
      summary: Midtrans payment notification webhook
      tags:
      - Subscription
  /subscriptions/plans:
    get:
      description: Get available subscription plans
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.SubscriptionPlanResponse'
      summary: Get all subscription plans
      tags:
      - Subscription
  /subscriptions/purchase/{planID}:
    post:
      consumes:
      - application/json
      description: Purchase a subscription plan
      parameters:
      - description: Plan ID
        in: path
        name: planID
        required: true
        type: string
      - description: Payment data (optional)
        in: body
        name: request
        schema:
          $ref: '#/definitions/model.PurchaseSubscriptionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.PaymentResponse'
      security:
      - BearerAuth: []
      summary: Purchase subscription plan
      tags:
      - Subscription
  /users:
    get:
      description: Only admins can retrieve all users.
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Maximum number of users
        in: query
        name: limit
        type: integer
      - description: Search by name or email or role
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.GetAllUserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/example.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/example.Forbidden'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - Users
    post:
      description: Only admins can create other users.
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/validation.CreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/example.CreateUserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/example.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/example.Forbidden'
        "409":
          description: Email already taken
          schema:
            $ref: '#/definitions/example.DuplicateEmail'
      security:
      - BearerAuth: []
      summary: Create a user
      tags:
      - Users
  /users/{id}:
    delete:
      description: Logged in users can delete only themselves. Only admins can delete
        other users.
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.DeleteUserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/example.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/example.Forbidden'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/example.NotFound'
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - Users
    get:
      description: Logged in users can fetch only their own user information. Only
        admins can fetch other users.
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.GetUserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/example.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/example.Forbidden'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/example.NotFound'
      security:
      - BearerAuth: []
      summary: Get a user
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: Logged-in users can only update their own information. Only admins
        can update other users.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Update user data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/validation.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.UpdateUserResponse'
      security:
      - BearerAuth: []
      summary: Update a user
      tags:
      - Users
  /users/{id}/statistics:
    get:
      description: Get user's weight, height, and calorie statistics.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.UserStatisticsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/example.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/example.Forbidden'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/example.NotFound'
      security:
      - BearerAuth: []
      summary: Get user statistics
      tags:
      - Users
  /v1/login-streak:
    get:
      consumes:
      - application/json
      description: Retrieves the login streak information for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Login streak data
          schema:
            $ref: '#/definitions/response.SuccessWithLoginStreak'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get login streak
      tags:
      - Login Streak
  /v1/login-streak/record:
    post:
      consumes:
      - application/json
      description: Records a login streak for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Login streak recorded successfully
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Record login streak
      tags:
      - Login Streak
  /weight-height:
    get:
      description: Logged in users can fetch their own weight and height records.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.GetAllWeightHeightResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/example.Unauthorized'
      security:
      - BearerAuth: []
      summary: Get all weight and height records
      tags:
      - Weight Height Record
    post:
      consumes:
      - application/json
      description: Logged in users can add a new weight and height record.
      parameters:
      - description: Weight and height data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/example.AddWeightHeightRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/example.AddWeightHeightResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/example.Unauthorized'
      security:
      - BearerAuth: []
      summary: Add a new weight and height record
      tags:
      - Weight Height Record
  /weight-height/{id}:
    delete:
      description: Logged in users can delete their own weight and height records.
      parameters:
      - description: Record ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.DeleteWeightHeightResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/example.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/example.Forbidden'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/example.NotFound'
      security:
      - BearerAuth: []
      summary: Delete a weight and height record
      tags:
      - Weight Height Record
    get:
      description: Logged in users can fetch their own weight and height record.
      parameters:
      - description: Record id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.GetWeightHeightResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/example.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/example.Forbidden'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/example.NotFound'
      security:
      - BearerAuth: []
      summary: Get a weight height
      tags:
      - Weight Height Record
    put:
      consumes:
      - application/json
      description: Logged in users can update their own weight and height records.
      parameters:
      - description: Record ID
        in: path
        name: id
        required: true
        type: string
      - description: Weight and height data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/example.UpdateWeightHeightRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.UpdateWeightHeightResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/example.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/example.Forbidden'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/example.NotFound'
      security:
      - BearerAuth: []
      summary: Update a weight and height record
      tags:
      - Weight Height Record
  /weight-height/target:
    get:
      description: Logged in users can fetch their own weight and height target records.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.GetAllWeightHeightTargetResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/example.Unauthorized'
      security:
      - BearerAuth: []
      summary: Get all weight and height target records
      tags:
      - Weight Height Record
    post:
      consumes:
      - application/json
      description: Logged in users can add a new weight and height target record.
      parameters:
      - description: Weight and height target data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/example.AddWeightHeightTargetRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/example.AddWeightHeightTargetResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/example.Unauthorized'
      security:
      - BearerAuth: []
      summary: Add a new weight and height target record
      tags:
      - Weight Height Record
  /weight-height/target/{id}:
    delete:
      description: Logged in users can delete their own weight and height target records.
      parameters:
      - description: Record ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.DeleteWeightHeightTargetResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/example.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/example.Forbidden'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/example.NotFound'
      security:
      - BearerAuth: []
      summary: Delete a weight and height target record
      tags:
      - Weight Height Record
    get:
      description: Logged in users can fetch their own weight and height target record.
      parameters:
      - description: Record id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.GetWeightHeightTargetResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/example.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/example.Forbidden'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/example.NotFound'
      security:
      - BearerAuth: []
      summary: Get a weight height target
      tags:
      - Weight Height Record
    put:
      consumes:
      - application/json
      description: Logged in users can update their own weight and height target records.
      parameters:
      - description: Record ID
        in: path
        name: id
        required: true
        type: string
      - description: Weight and height target data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/example.UpdateWeightHeightTargetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.UpdateWeightHeightTargetResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/example.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/example.Forbidden'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/example.NotFound'
      security:
      - BearerAuth: []
      summary: Update a weight and height target record
      tags:
      - Weight Height Record
securityDefinitions:
  BearerAuth:
    description: 'Example Value: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
