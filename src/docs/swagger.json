{
    "swagger": "2.0",
    "info": {
        "title": "Nutribox API documentation",
        "contact": {},
        "license": {
            "name": "MIT",
            "url": "https://github.com/indrayyana/go-fiber-boilerplate/blob/main/LICENSE"
        },
        "version": "1.0.0"
    },
    "host": "localhost:5000",
    "basePath": "/v1",
    "paths": {
        "/admin/product-tokens": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns a list of all product tokens with their activation status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get all product tokens",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Include user data",
                        "name": "with_user",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.GetAllProductTokensResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new custom product token that can be used by users. Optionally, a `subscription_plan_id` can be provided to grant a subscription when the token is verified.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Create new product token",
                "parameters": [
                    {
                        "description": "Product token details (token, is_active, subscription_plan_id)",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.CreateCustomToken"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/example.CreateProductTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request or token already exists",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/product-tokens/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates an existing product token. Fields to update (token, is_active, subscription_plan_id) should be provided in the request body. To remove a subscription plan, pass an empty string for `subscription_plan_id`.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Update product token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product token ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Product token details to update",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.UpdateProductToken"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithProductToken"
                        }
                    },
                    "400": {
                        "description": "Invalid request, token already exists, or invalid SubscriptionPlanID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Product token or Subscription Plan not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a product token by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Delete product token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product token ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Common"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/subscription-plans": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns a list of all subscription plans with their users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get all subscription plans",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Include users for each plan",
                        "name": "with_users",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.AdminSubscriptionPlansResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/subscription-plans/{plan_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns details of a specific subscription plan",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get subscription plan details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Plan ID",
                        "name": "plan_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithSubscriptionPlan"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates a subscription plan (name, price, features, etc.)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Update subscription plan",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Plan ID",
                        "name": "plan_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update plan data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.UpdateSubscriptionPlan"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithSubscriptionPlan"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/subscriptions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns a list of all user subscriptions with pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get all user subscriptions",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of subscriptions",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by status (active, expired, pending)",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithPaginateSubscriptions"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/subscriptions/{subscription_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns details of a specific user subscription",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get user subscription details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subscription ID",
                        "name": "subscription_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithSubscription"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a user subscription",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Delete user subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subscription ID",
                        "name": "subscription_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Common"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates a user subscription (plan, status, etc.)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Update user subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subscription ID",
                        "name": "subscription_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update subscription data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.UpdateSubscription"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/subscriptions/{subscription_id}/payment-status": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the payment status of a user subscription",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Update payment status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subscription ID",
                        "name": "subscription_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update payment status data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.UpdatePaymentStatus"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/subscriptions/{subscription_id}/transactions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns transaction logs for a specific user subscription",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get transaction logs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subscription ID",
                        "name": "subscription_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.TransactionsResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/transactions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns a list of all transaction logs with pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get all transaction logs",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of transactions",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.TransactionsResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/transactions/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns details of a specific transaction",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get transaction details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Transaction ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.TransactionDetailResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Admin endpoint to retrieve all users with pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get all users",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of users",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by name or email or role",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.SuccessWithPaginateUsers"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Admin endpoint to get detailed user information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get user details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithUser"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Admin endpoint to update user information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update user data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.UpdateUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithUser"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/article-categories": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all article categories",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Article Categories"
                ],
                "summary": "Get all article categories",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithArticleCategoryList"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create new article category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Article Categories"
                ],
                "summary": "Create new article category",
                "parameters": [
                    {
                        "description": "Category data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/example.CreateArticleCategoryRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithArticleCategory"
                        }
                    }
                }
            }
        },
        "/article-categories/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete article category",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Article Categories"
                ],
                "summary": "Delete article category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Common"
                        }
                    }
                }
            }
        },
        "/articles": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all articles",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Articles"
                ],
                "summary": "Get all articles",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithArticleList"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create new article",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Articles"
                ],
                "summary": "Create new article",
                "parameters": [
                    {
                        "description": "Article data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/example.CreateArticleRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithArticle"
                        }
                    }
                }
            }
        },
        "/articles/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get article by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Articles"
                ],
                "summary": "Get article by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Article ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithArticle"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update article",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Articles"
                ],
                "summary": "Update article",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Article ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Article data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/example.UpdateArticleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithArticle"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete article",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Articles"
                ],
                "summary": "Delete article",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Article ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Common"
                        }
                    }
                }
            }
        },
        "/auth/forgot-password": {
            "post": {
                "description": "An email will be sent to reset password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Forgot password",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.ForgotPassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.ForgotPasswordResponse"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/example.NotFound"
                        }
                    }
                }
            }
        },
        "/auth/google": {
            "get": {
                "description": "Login user using Google OAuth2 and return authentication tokens.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login with Google",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Google ID Token",
                        "name": "id_token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.GoogleLoginResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.LoginResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid email or password",
                        "schema": {
                            "$ref": "#/definitions/example.FailedLogin"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Logout",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/example.RefreshToken"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.LogoutResponse"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/example.NotFound"
                        }
                    }
                }
            }
        },
        "/auth/refresh-tokens": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh auth tokens",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/example.RefreshToken"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.RefreshTokenResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register a new user. User will receive verification email to start 2-week free trial after registration.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register as user",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.Register"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Registration successful. Check email for verification link to start 2-week free trial.",
                        "schema": {
                            "$ref": "#/definitions/example.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Email already taken",
                        "schema": {
                            "$ref": "#/definitions/example.DuplicateEmail"
                        }
                    }
                }
            }
        },
        "/auth/reset-password": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Reset password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The reset password token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.UpdatePassOrVerify"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.ResetPasswordResponse"
                        }
                    },
                    "401": {
                        "description": "Password reset failed",
                        "schema": {
                            "$ref": "#/definitions/example.FailedResetPassword"
                        }
                    }
                }
            }
        },
        "/auth/send-verification-email": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "An email will be sent to verify email.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Send verification email",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.SendVerificationEmailResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    }
                }
            }
        },
        "/auth/verify-email": {
            "post": {
                "description": "Verify user email and automatically create 2-week free trial with full access to all features.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Verify email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The verify email token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email verified successfully. 2-week free trial activated with full access.",
                        "schema": {
                            "$ref": "#/definitions/example.VerifyEmailResponse"
                        }
                    },
                    "401": {
                        "description": "Verify email failed - invalid or expired token",
                        "schema": {
                            "$ref": "#/definitions/example.FailedVerifyEmail"
                        }
                    }
                }
            }
        },
        "/bahan-makanan": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all bahan makanan",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BahanMakanan"
                ],
                "summary": "Get all bahan makanan",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithBahanMakananList"
                        }
                    }
                }
            }
        },
        "/bahan-makanan/kelompok/{kelompok}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get bahan makanan by kelompok makanan",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BahanMakanan"
                ],
                "summary": "Get bahan makanan by kelompok",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Kelompok Makanan",
                        "name": "kelompok",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithBahanMakananList"
                        }
                    }
                }
            }
        },
        "/bahan-makanan/kode/{kode}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get bahan makanan by kode",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BahanMakanan"
                ],
                "summary": "Get bahan makanan by kode",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Kode Bahan Makanan",
                        "name": "kode",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithBahanMakanan"
                        }
                    }
                }
            }
        },
        "/bahan-makanan/mentah-olahan/{mentah_olahan}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get bahan makanan by mentah olahan status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BahanMakanan"
                ],
                "summary": "Get bahan makanan by mentah olahan",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Mentah/Olahan Status",
                        "name": "mentah_olahan",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithBahanMakananList"
                        }
                    }
                }
            }
        },
        "/bahan-makanan/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get bahan makanan by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BahanMakanan"
                ],
                "summary": "Get bahan makanan by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Bahan Makanan ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithBahanMakanan"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update bahan makanan",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BahanMakanan"
                ],
                "summary": "Update bahan makanan",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Bahan Makanan ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Bahan Makanan data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.BahanMakanan"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithBahanMakanan"
                        }
                    }
                }
            }
        },
        "/health-check": {
            "get": {
                "description": "Check the status of services and database connections",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Health Check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.HealthCheckResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/example.HealthCheckResponseError"
                        }
                    }
                }
            }
        },
        "/home/statistic": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logged in users can fetch their home statistics including today's consumed calories and weight/height info",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Statistics"
                ],
                "summary": "Get home statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.GetHomeStatisticsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    }
                }
            }
        },
        "/meals": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logged in users can fetch only their own meals information.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Meals"
                ],
                "summary": "Get a user's meals",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of meals per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.GetAllMealsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logged in users can add a new meal.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Meals"
                ],
                "summary": "Add a new meal",
                "parameters": [
                    {
                        "description": "Meal data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/example.AddMealRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/example.AddMealResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    }
                }
            }
        },
        "/meals/scan": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Only users who already logged in and had product token verified can scan a meal an get the nutritions",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Meals"
                ],
                "summary": "Scan a meal",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Meal's image",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.MealScanResponse"
                        }
                    }
                }
            }
        },
        "/meals/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logged in users can fetch only their own meal detail information. Only admins can fetch other user's meal.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Meals"
                ],
                "summary": "Get a meal",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Meal id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.GetMealResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/example.Forbidden"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/example.NotFound"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logged in users can update their own meal. Only admins can update other user's meal.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Meals"
                ],
                "summary": "Update a meal",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Meal ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Meal data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/example.UpdateMealRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.UpdateMealResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/example.Forbidden"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/example.NotFound"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logged in users can delete their own meal. Only admins can delete other user's meal.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Meals"
                ],
                "summary": "Delete a meal",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Meal ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.DeleteMealResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/example.Forbidden"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/example.NotFound"
                        }
                    }
                }
            }
        },
        "/meals/{id}/scan-detail": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logged in users can fetch only their own meal's scan detail detail information. Only admins can fetch other user's meal's scan detail.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Meals"
                ],
                "summary": "Get a meal's scan detail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Meal id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.GetMealScanDetailResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/example.Forbidden"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/example.NotFound"
                        }
                    }
                }
            }
        },
        "/meals/{mealId}/scan-detail": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logged in users can add a new meal's scan detail.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Meals"
                ],
                "summary": "Add a new meal's scan detail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Meal ID",
                        "name": "mealId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Meal's scan detail data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/example.AddMealScanDetailRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/example.AddMealScanDetailResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/example.NotFound"
                        }
                    }
                }
            }
        },
        "/product-token/verify": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product Token"
                ],
                "summary": "Verify Product Token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The product token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.VerifyProductTokenResponse"
                        }
                    },
                    "404": {
                        "description": "Invalid or already used product token",
                        "schema": {
                            "$ref": "#/definitions/example.FailedVerifyProductToken"
                        }
                    }
                }
            }
        },
        "/recipes": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all recipes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Recipes"
                ],
                "summary": "Get all recipes",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithRecipeList"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create new recipe",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Recipes"
                ],
                "summary": "Create new recipe",
                "parameters": [
                    {
                        "description": "Recipe data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/example.CreateRecipeRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithRecipe"
                        }
                    }
                }
            }
        },
        "/recipes/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get recipe by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Recipes"
                ],
                "summary": "Get recipe by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Recipe ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithRecipe"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update recipe",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Recipes"
                ],
                "summary": "Update recipe",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Recipe ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Recipe data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/example.UpdateRecipeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithRecipe"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete recipe",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Recipes"
                ],
                "summary": "Delete recipe",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Recipe ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Common"
                        }
                    }
                }
            }
        },
        "/subscriptions/check-feature": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Check if user has access to a feature",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscription"
                ],
                "summary": "Check feature access",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Feature name",
                        "name": "feature",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.FeatureAccessResponse"
                        }
                    }
                }
            }
        },
        "/subscriptions/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get user's active subscription",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscription"
                ],
                "summary": "Get current subscription",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.UserSubscriptionResponse"
                        }
                    }
                }
            }
        },
        "/subscriptions/notification": {
            "post": {
                "description": "Handle payment notification from Midtrans",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscription"
                ],
                "summary": "Midtrans payment notification webhook",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Common"
                        }
                    }
                }
            }
        },
        "/subscriptions/plans": {
            "get": {
                "description": "Get available subscription plans",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscription"
                ],
                "summary": "Get all subscription plans",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.SubscriptionPlanResponse"
                        }
                    }
                }
            }
        },
        "/subscriptions/purchase/{planID}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Purchase a subscription plan",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscription"
                ],
                "summary": "Purchase subscription plan",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Plan ID",
                        "name": "planID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Payment data (optional)",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/model.PurchaseSubscriptionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.PaymentResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Only admins can retrieve all users.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get all users",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of users",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by name or email or role",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.GetAllUserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/example.Forbidden"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Only admins can create other users.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create a user",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.CreateUser"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/example.CreateUserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/example.Forbidden"
                        }
                    },
                    "409": {
                        "description": "Email already taken",
                        "schema": {
                            "$ref": "#/definitions/example.DuplicateEmail"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logged in users can fetch only their own user information. Only admins can fetch other users.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.GetUserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/example.Forbidden"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/example.NotFound"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logged in users can delete only themselves. Only admins can delete other users.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.DeleteUserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/example.Forbidden"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/example.NotFound"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logged-in users can only update their own information. Only admins can update other users.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update user data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.UpdateUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.UpdateUserResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}/statistics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get user's weight, height, and calorie statistics.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user statistics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.UserStatisticsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/example.Forbidden"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/example.NotFound"
                        }
                    }
                }
            }
        },
        "/v1/login-streak": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the login streak information for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Login Streak"
                ],
                "summary": "Get login streak",
                "responses": {
                    "200": {
                        "description": "Login streak data",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessWithLoginStreak"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/login-streak/record": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Records a login streak for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Login Streak"
                ],
                "summary": "Record login streak",
                "responses": {
                    "200": {
                        "description": "Login streak recorded successfully",
                        "schema": {
                            "$ref": "#/definitions/response.CommonResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/weight-height": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logged in users can fetch their own weight and height records.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Weight Height Record"
                ],
                "summary": "Get all weight and height records",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.GetAllWeightHeightResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logged in users can add a new weight and height record.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Weight Height Record"
                ],
                "summary": "Add a new weight and height record",
                "parameters": [
                    {
                        "description": "Weight and height data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/example.AddWeightHeightRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/example.AddWeightHeightResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    }
                }
            }
        },
        "/weight-height/target": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logged in users can fetch their own weight and height target records.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Weight Height Record"
                ],
                "summary": "Get all weight and height target records",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.GetAllWeightHeightTargetResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logged in users can add a new weight and height target record.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Weight Height Record"
                ],
                "summary": "Add a new weight and height target record",
                "parameters": [
                    {
                        "description": "Weight and height target data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/example.AddWeightHeightTargetRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/example.AddWeightHeightTargetResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    }
                }
            }
        },
        "/weight-height/target/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logged in users can fetch their own weight and height target record.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Weight Height Record"
                ],
                "summary": "Get a weight height target",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Record id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.GetWeightHeightTargetResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/example.Forbidden"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/example.NotFound"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logged in users can update their own weight and height target records.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Weight Height Record"
                ],
                "summary": "Update a weight and height target record",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Record ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Weight and height target data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/example.UpdateWeightHeightTargetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.UpdateWeightHeightTargetResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/example.Forbidden"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/example.NotFound"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logged in users can delete their own weight and height target records.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Weight Height Record"
                ],
                "summary": "Delete a weight and height target record",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Record ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.DeleteWeightHeightTargetResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/example.Forbidden"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/example.NotFound"
                        }
                    }
                }
            }
        },
        "/weight-height/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logged in users can fetch their own weight and height record.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Weight Height Record"
                ],
                "summary": "Get a weight height",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Record id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.GetWeightHeightResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/example.Forbidden"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/example.NotFound"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logged in users can update their own weight and height records.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Weight Height Record"
                ],
                "summary": "Update a weight and height record",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Record ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Weight and height data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/example.UpdateWeightHeightRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.UpdateWeightHeightResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/example.Forbidden"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/example.NotFound"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logged in users can delete their own weight and height records.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Weight Height Record"
                ],
                "summary": "Delete a weight and height record",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Record ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.DeleteWeightHeightResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/example.Forbidden"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/example.NotFound"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "example.AddMealRequest": {
            "type": "object",
            "properties": {
                "calories": {
                    "type": "number",
                    "example": 500
                },
                "carbs": {
                    "type": "number",
                    "example": 60
                },
                "fat": {
                    "type": "number",
                    "example": 15
                },
                "label": {
                    "type": "string",
                    "example": "Lunch"
                },
                "meal_time": {
                    "type": "string",
                    "example": "2023-10-10T12:00:00Z"
                },
                "protein": {
                    "type": "number",
                    "example": 20
                },
                "title": {
                    "type": "string",
                    "example": "Nasi Goreng"
                }
            }
        },
        "example.AddMealResponse": {
            "type": "object",
            "properties": {
                "meal": {
                    "$ref": "#/definitions/example.MealHistory"
                },
                "message": {
                    "type": "string",
                    "example": "Meal added successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.AddMealScanDetailRequest": {
            "type": "object",
            "properties": {
                "api_result": {
                    "type": "string",
                    "example": "{...}"
                },
                "meal_history_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                }
            }
        },
        "example.AddMealScanDetailResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Meal scan detail added successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.AddWeightHeightRequest": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "number",
                    "example": 175
                },
                "recorded_at": {
                    "type": "string",
                    "example": "2023-10-10T12:00:00Z"
                },
                "weight": {
                    "type": "number",
                    "example": 70.5
                }
            }
        },
        "example.AddWeightHeightResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/example.UsersWeightHeightHistory"
                },
                "message": {
                    "type": "string",
                    "example": "Weight and height record added successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.AddWeightHeightTargetRequest": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "number",
                    "example": 175
                },
                "target_date": {
                    "type": "string",
                    "example": "2023-10-10T12:00:00Z"
                },
                "weight": {
                    "type": "number",
                    "example": 70.5
                }
            }
        },
        "example.AddWeightHeightTargetResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/example.UsersWeightHeightTarget"
                },
                "message": {
                    "type": "string",
                    "example": "Weight and height target record added successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.AdminSubscriptionPlanWithUsersResponse": {
            "type": "object",
            "properties": {
                "ai_scan_limit": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "features": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    }
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "price_formatted": {
                    "type": "string"
                },
                "user_count": {
                    "type": "integer"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/example.UserSubscriptionResponse"
                    }
                },
                "validity_days": {
                    "type": "integer"
                }
            }
        },
        "example.AdminSubscriptionPlansResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/example.AdminSubscriptionPlanWithUsersResponse"
                    }
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "example.CalorieStat": {
            "type": "object",
            "properties": {
                "calories": {
                    "type": "number",
                    "example": 500
                },
                "recorded_at": {
                    "type": "string",
                    "example": "2023-10-10T08:00:00Z"
                }
            }
        },
        "example.CreateArticleCategoryRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Technology"
                }
            }
        },
        "example.CreateArticleRequest": {
            "type": "object",
            "properties": {
                "category_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "content": {
                    "type": "string",
                    "example": "This is the content of my article"
                },
                "image": {
                    "type": "string",
                    "example": "https://example.com/image.jpg"
                },
                "published_at": {
                    "type": "string",
                    "example": "2023-10-10T12:00:00Z"
                },
                "slug": {
                    "type": "string",
                    "example": "my-first-article"
                },
                "title": {
                    "type": "string",
                    "example": "My First Article"
                }
            }
        },
        "example.CreateProductTokenResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/example.ProductTokenResponse"
                },
                "message": {
                    "type": "string",
                    "example": "Product token created successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.CreateRecipeRequest": {
            "type": "object",
            "properties": {
                "day": {
                    "type": "string",
                    "example": "monday"
                },
                "description": {
                    "type": "string",
                    "example": "Nasi goreng dengan bumbu rahasia"
                },
                "image": {
                    "type": "string",
                    "example": "https://example.com/nasi-goreng.jpg"
                },
                "ingredients": {
                    "type": "string",
                    "example": "Nasi, telur, bawang, kecap"
                },
                "instructions": {
                    "type": "string",
                    "example": "1. Tumis bawang..."
                },
                "label": {
                    "type": "string",
                    "example": "Main Course"
                },
                "name": {
                    "type": "string",
                    "example": "Nasi Goreng Spesial"
                },
                "slug": {
                    "type": "string",
                    "example": "nasi-goreng-spesial"
                }
            }
        },
        "example.CreateUserResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Create user successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                },
                "user": {
                    "$ref": "#/definitions/example.User"
                }
            }
        },
        "example.DailyNutrition": {
            "type": "object",
            "properties": {
                "calories": {
                    "type": "number",
                    "example": 1250.5
                },
                "carbs": {
                    "type": "number",
                    "example": 150.3
                },
                "date": {
                    "type": "string",
                    "example": "2023-10-10T00:00:00Z"
                },
                "fat": {
                    "type": "number",
                    "example": 45.1
                },
                "protein": {
                    "type": "number",
                    "example": 85.2
                }
            }
        },
        "example.DeleteMealResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Meal deleted successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.DeleteUserResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Delete user successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.DeleteWeightHeightResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Weight and height record deleted successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.DeleteWeightHeightTargetResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Weight and height target record deleted successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.DuplicateEmail": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Email already taken"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "example.FailedLogin": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Invalid email or password"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "example.FailedResetPassword": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Password reset failed"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "example.FailedVerifyEmail": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Verify email failed"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "example.FailedVerifyProductToken": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Invalid or already used product token"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "example.FeatureFlags": {
            "type": "object",
            "properties": {
                "bmi_check": {
                    "type": "boolean",
                    "example": true
                },
                "scan_ai": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "example.Forbidden": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "You don't have permission to access this resource"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "example.ForgotPasswordResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "A password reset link has been sent to your email address."
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.GetAllMealsResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer",
                    "example": 10
                },
                "message": {
                    "type": "string",
                    "example": "Get all meals successfully"
                },
                "page": {
                    "type": "integer",
                    "example": 1
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/example.MealHistory"
                    }
                },
                "status": {
                    "type": "string",
                    "example": "success"
                },
                "total_pages": {
                    "type": "integer",
                    "example": 5
                },
                "total_results": {
                    "type": "integer",
                    "example": 50
                }
            }
        },
        "example.GetAllProductTokensResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/example.ProductTokenResponse"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Product tokens retrieved successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.GetAllUserResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer",
                    "example": 10
                },
                "message": {
                    "type": "string",
                    "example": "Get all users successfully"
                },
                "page": {
                    "type": "integer",
                    "example": 1
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/example.User"
                    }
                },
                "status": {
                    "type": "string",
                    "example": "success"
                },
                "total_pages": {
                    "type": "integer",
                    "example": 1
                },
                "total_results": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "example.GetAllWeightHeightResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/example.UsersWeightHeightHistory"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Weight and height records fetched successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.GetAllWeightHeightTargetResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/example.UsersWeightHeightTarget"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Weight and height target records fetched successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.GetHomeStatisticsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/example.HomeStatistics"
                },
                "message": {
                    "type": "string",
                    "example": "Home statistics fetched successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.GetMealResponse": {
            "type": "object",
            "properties": {
                "meal": {
                    "$ref": "#/definitions/example.MealHistory"
                },
                "message": {
                    "type": "string",
                    "example": "Get meal successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.GetMealScanDetailResponse": {
            "type": "object",
            "properties": {
                "meal_scan_detail": {
                    "$ref": "#/definitions/example.MealScanResponse"
                },
                "message": {
                    "type": "string",
                    "example": "Get meal's scan detail successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.GetUserResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Get user successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                },
                "user": {
                    "$ref": "#/definitions/example.User"
                }
            }
        },
        "example.GetWeightHeightResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/example.UsersWeightHeightHistory"
                },
                "message": {
                    "type": "string",
                    "example": "Weight and height records fetched successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.GetWeightHeightTargetResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/example.UsersWeightHeightTarget"
                },
                "message": {
                    "type": "string",
                    "example": "Weight and height target records fetched successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.GoogleLoginResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Login successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                },
                "tokens": {
                    "$ref": "#/definitions/example.Tokens"
                },
                "user": {
                    "$ref": "#/definitions/example.GoogleUser"
                }
            }
        },
        "example.GoogleUser": {
            "type": "object",
            "properties": {
                "activity_level": {
                    "type": "string",
                    "example": "Medium"
                },
                "birth_date": {
                    "type": "string",
                    "example": "2000-01-01T00:00:00Z"
                },
                "email": {
                    "type": "string",
                    "example": "fake@example.com"
                },
                "gender": {
                    "type": "string",
                    "example": "Male"
                },
                "height": {
                    "type": "number",
                    "example": 175.5
                },
                "id": {
                    "type": "string",
                    "example": "e088d183-9eea-4a11-8d5d-74d7ec91bdf5"
                },
                "medical_history": {
                    "type": "string",
                    "example": "No known allergies"
                },
                "name": {
                    "type": "string",
                    "example": "fake name"
                },
                "role": {
                    "type": "string",
                    "example": "user"
                },
                "verified_email": {
                    "type": "boolean",
                    "example": true
                },
                "weight": {
                    "type": "number",
                    "example": 65.2
                }
            }
        },
        "example.HealthCheck": {
            "type": "object",
            "properties": {
                "is_up": {
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "type": "string",
                    "example": "Postgre"
                },
                "status": {
                    "type": "string",
                    "example": "Up"
                }
            }
        },
        "example.HealthCheckError": {
            "type": "object",
            "properties": {
                "is_up": {
                    "type": "boolean",
                    "example": false
                },
                "message": {
                    "type": "string",
                    "example": "failed to connect to 'host=localhost user=postgres database=wrongdb': server error (FATAL: database \"wrongdb\" does not exist (SQLSTATE 3D000))"
                },
                "name": {
                    "type": "string",
                    "example": "Postgre"
                },
                "status": {
                    "type": "string",
                    "example": "Down"
                }
            }
        },
        "example.HealthCheckResponse": {
            "type": "object",
            "properties": {
                "is_healthy": {
                    "type": "boolean",
                    "example": true
                },
                "message": {
                    "type": "string",
                    "example": "Health check completed"
                },
                "result": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/example.HealthCheck"
                    }
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.HealthCheckResponseError": {
            "type": "object",
            "properties": {
                "is_healthy": {
                    "type": "boolean",
                    "example": false
                },
                "message": {
                    "type": "string",
                    "example": "Health check completed"
                },
                "result": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/example.HealthCheckError"
                    }
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "example.HeightStat": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "number",
                    "example": 170
                },
                "recorded_at": {
                    "type": "string",
                    "example": "2023-10-10T08:00:00Z"
                }
            }
        },
        "example.HomeStatistics": {
            "type": "object",
            "properties": {
                "daily_nutrition": {
                    "$ref": "#/definitions/example.DailyNutrition"
                },
                "weight_height_statistics": {
                    "$ref": "#/definitions/example.WeightHeightStatistics"
                }
            }
        },
        "example.JSONData": {
            "type": "object",
            "additionalProperties": true
        },
        "example.LoginResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Login successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                },
                "tokens": {
                    "$ref": "#/definitions/example.Tokens"
                },
                "user": {
                    "$ref": "#/definitions/example.User"
                }
            }
        },
        "example.LogoutResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Logout successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.MealHistory": {
            "type": "object",
            "properties": {
                "calories": {
                    "type": "number",
                    "example": 250.5
                },
                "carbs": {
                    "type": "number",
                    "example": 45.3
                },
                "fat": {
                    "type": "number",
                    "example": 10.1
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "label": {
                    "type": "string",
                    "example": "Lunch"
                },
                "meal_time": {
                    "type": "string",
                    "example": "2023-10-01T12:00:00Z"
                },
                "protein": {
                    "type": "number",
                    "example": 30.2
                },
                "title": {
                    "type": "string",
                    "example": "Scanned Meal"
                },
                "user_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                }
            }
        },
        "example.MealScanResponse": {
            "type": "object",
            "properties": {
                "foods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "chicken",
                        "rice",
                        "salad"
                    ]
                },
                "message": {
                    "type": "string",
                    "example": "Meal scanned successfully"
                },
                "nutrient": {
                    "$ref": "#/definitions/example.Nutrient"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.NotFound": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Not found"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "example.Nutrient": {
            "type": "object",
            "properties": {
                "calories": {
                    "$ref": "#/definitions/example.NutrientDetail"
                },
                "carbs": {
                    "$ref": "#/definitions/example.NutrientDetail"
                },
                "fat": {
                    "$ref": "#/definitions/example.NutrientDetail"
                },
                "protein": {
                    "$ref": "#/definitions/example.NutrientDetail"
                }
            }
        },
        "example.NutrientDetail": {
            "type": "object",
            "properties": {
                "quantity": {
                    "type": "number",
                    "example": 250.5
                },
                "unit": {
                    "type": "string",
                    "example": "kcal"
                }
            }
        },
        "example.ProductTokenResponse": {
            "type": "object",
            "properties": {
                "activated_at": {
                    "type": "string",
                    "example": "2025-04-20T14:30:00Z"
                },
                "created_at": {
                    "type": "string",
                    "example": "2025-04-01T10:00:00Z"
                },
                "created_by": {
                    "$ref": "#/definitions/example.SimpleUser"
                },
                "created_by_id": {
                    "type": "string",
                    "example": "b1c2d3e4-f5g6-h7i8-j9k0-l1m2n3o4p5q6"
                },
                "id": {
                    "type": "string",
                    "example": "e088d183-9eea-4a11-8d5d-74d7ec91bdf5"
                },
                "is_active": {
                    "type": "boolean",
                    "example": true
                },
                "token": {
                    "type": "string",
                    "example": "abc123def456ghi789"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2025-04-01T10:00:00Z"
                },
                "user": {
                    "$ref": "#/definitions/example.SimpleUser"
                },
                "user_id": {
                    "type": "string",
                    "example": "a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6"
                }
            }
        },
        "example.RefreshToken": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg"
                }
            }
        },
        "example.RefreshTokenResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "success"
                },
                "tokens": {
                    "$ref": "#/definitions/example.Tokens"
                }
            }
        },
        "example.RegisterResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Register successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                },
                "tokens": {
                    "$ref": "#/definitions/example.Tokens"
                },
                "user": {
                    "$ref": "#/definitions/example.User"
                }
            }
        },
        "example.ResetPasswordResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Update password successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.SendVerificationEmailResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Please check your email for a link to verify your account"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.SimpleUser": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "id": {
                    "type": "string",
                    "example": "e088d183-9eea-4a11-8d5d-74d7ec91bdf5"
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "role": {
                    "type": "string",
                    "example": "user"
                },
                "verified_email": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "example.SubscriptionPlanResponse": {
            "type": "object",
            "properties": {
                "ai_scan_limit": {
                    "type": "integer"
                },
                "description": {
                    "type": "string",
                    "example": "Paket best seller dengan fitur lengkap"
                },
                "features": {
                    "$ref": "#/definitions/example.FeatureFlags"
                },
                "id": {
                    "type": "string",
                    "example": "a1b2c3d4-e5f6-7890"
                },
                "name": {
                    "type": "string",
                    "example": "Paket Sehat"
                },
                "price": {
                    "type": "integer"
                },
                "price_formatted": {
                    "type": "string",
                    "example": "Rp 30.000"
                },
                "validity_days": {
                    "type": "integer"
                }
            }
        },
        "example.SuccessWithPaginateUsers": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer",
                    "example": 10
                },
                "message": {
                    "type": "string",
                    "example": "Get all users successfully"
                },
                "page": {
                    "type": "integer",
                    "example": 1
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/example.SimpleUser"
                    }
                },
                "status": {
                    "type": "string",
                    "example": "success"
                },
                "total_pages": {
                    "type": "integer",
                    "example": 5
                },
                "total_results": {
                    "type": "integer",
                    "example": 42
                }
            }
        },
        "example.TokenExpires": {
            "type": "object",
            "properties": {
                "expires": {
                    "type": "string",
                    "example": "2024-10-07T11:56:46.618180553Z"
                },
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg"
                }
            }
        },
        "example.Tokens": {
            "type": "object",
            "properties": {
                "access": {
                    "$ref": "#/definitions/example.TokenExpires"
                },
                "refresh": {
                    "$ref": "#/definitions/example.TokenExpires"
                }
            }
        },
        "example.TransactionDetailResponse": {
            "type": "object",
            "properties": {
                "acquirer": {
                    "type": "string"
                },
                "approval_code": {
                    "type": "string"
                },
                "bank": {
                    "type": "string"
                },
                "bill_key": {
                    "type": "string"
                },
                "biller_code": {
                    "type": "string"
                },
                "card_type": {
                    "type": "string"
                },
                "channel_response_code": {
                    "type": "string"
                },
                "channel_response_message": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "eci": {
                    "type": "string"
                },
                "fraud_status": {
                    "type": "string"
                },
                "gross_amount": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "issuer": {
                    "description": "E-wallet specific fields",
                    "type": "string"
                },
                "masked_card": {
                    "description": "Credit Card specific fields",
                    "type": "string"
                },
                "order_id": {
                    "type": "string"
                },
                "payment_amounts": {
                    "$ref": "#/definitions/example.JSONData"
                },
                "payment_code": {
                    "type": "string"
                },
                "payment_type": {
                    "type": "string"
                },
                "permata_va_number": {
                    "type": "string"
                },
                "raw_response": {
                    "description": "Raw response for debugging",
                    "allOf": [
                        {
                            "$ref": "#/definitions/example.JSONData"
                        }
                    ]
                },
                "settlement_time": {
                    "description": "Settlement info",
                    "type": "string"
                },
                "status_code": {
                    "type": "string"
                },
                "status_message": {
                    "type": "string"
                },
                "store": {
                    "description": "Store specific fields",
                    "type": "string"
                },
                "transaction_id": {
                    "type": "string"
                },
                "transaction_status": {
                    "type": "string"
                },
                "transaction_time": {
                    "type": "string"
                },
                "user_subscription_id": {
                    "type": "string"
                },
                "va_numbers": {
                    "description": "Bank Transfer specific fields",
                    "allOf": [
                        {
                            "$ref": "#/definitions/example.JSONData"
                        }
                    ]
                }
            }
        },
        "example.TransactionsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/example.TransactionDetailResponse"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "total_pages": {
                    "type": "integer"
                },
                "total_results": {
                    "type": "integer"
                }
            }
        },
        "example.Unauthorized": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Please authenticate"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "example.UpdateArticleRequest": {
            "type": "object",
            "properties": {
                "category_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "content": {
                    "type": "string",
                    "example": "Updated content of my article"
                },
                "image": {
                    "type": "string",
                    "example": "https://example.com/new-image.jpg"
                },
                "published_at": {
                    "type": "string",
                    "example": "2023-10-11T12:00:00Z"
                },
                "slug": {
                    "type": "string",
                    "example": "updated-article-slug"
                },
                "title": {
                    "type": "string",
                    "example": "Updated Article Title"
                }
            }
        },
        "example.UpdateMealRequest": {
            "type": "object",
            "properties": {
                "calories": {
                    "type": "number",
                    "example": 550
                },
                "carbs": {
                    "type": "number",
                    "example": 65
                },
                "fat": {
                    "type": "number",
                    "example": 18
                },
                "label": {
                    "type": "string",
                    "example": "Dinner"
                },
                "meal_time": {
                    "type": "string",
                    "example": "2023-10-10T12:30:00Z"
                },
                "protein": {
                    "type": "number",
                    "example": 25
                },
                "title": {
                    "type": "string",
                    "example": "Nasi Goreng Spesial"
                }
            }
        },
        "example.UpdateMealResponse": {
            "type": "object",
            "properties": {
                "meal": {
                    "$ref": "#/definitions/example.MealHistory"
                },
                "message": {
                    "type": "string",
                    "example": "Meal updated successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.UpdateRecipeRequest": {
            "type": "object",
            "properties": {
                "day": {
                    "type": "string",
                    "example": "tuesday"
                },
                "description": {
                    "type": "string",
                    "example": "Nasi goreng dengan bumbu premium"
                },
                "image": {
                    "type": "string",
                    "example": "https://example.com/nasi-goreng-premium.jpg"
                },
                "ingredients": {
                    "type": "string",
                    "example": "Nasi, telur, bawang, kecap, ayam"
                },
                "instructions": {
                    "type": "string",
                    "example": "1. Tumis bawang... 2. Masukkan ayam..."
                },
                "label": {
                    "type": "string",
                    "example": "Special Menu"
                },
                "name": {
                    "type": "string",
                    "example": "Nasi Goreng Premium"
                },
                "slug": {
                    "type": "string",
                    "example": "nasi-goreng-premium"
                }
            }
        },
        "example.UpdateUserResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Update user successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                },
                "user": {
                    "$ref": "#/definitions/example.User"
                }
            }
        },
        "example.UpdateWeightHeightRequest": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "number",
                    "example": 175
                },
                "recorded_at": {
                    "type": "string",
                    "example": "2023-10-10T12:00:00Z"
                },
                "weight": {
                    "type": "number",
                    "example": 70.5
                }
            }
        },
        "example.UpdateWeightHeightResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/example.UsersWeightHeightHistory"
                },
                "message": {
                    "type": "string",
                    "example": "Weight and height record updated successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.UpdateWeightHeightTargetRequest": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "number",
                    "example": 175
                },
                "target_date": {
                    "type": "string",
                    "example": "2023-10-10T12:00:00Z"
                },
                "weight": {
                    "type": "number",
                    "example": 70.5
                }
            }
        },
        "example.UpdateWeightHeightTargetResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/example.UsersWeightHeightTarget"
                },
                "message": {
                    "type": "string",
                    "example": "Weight and height record target updated successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.User": {
            "type": "object",
            "properties": {
                "activity_level": {
                    "type": "string",
                    "example": "Medium"
                },
                "birth_date": {
                    "type": "string",
                    "example": "2000-01-01T00:00:00Z"
                },
                "email": {
                    "type": "string",
                    "example": "fake@example.com"
                },
                "gender": {
                    "type": "string",
                    "example": "Male"
                },
                "height": {
                    "type": "number",
                    "example": 175.5
                },
                "id": {
                    "type": "string",
                    "example": "e088d183-9eea-4a11-8d5d-74d7ec91bdf5"
                },
                "medical_history": {
                    "type": "string",
                    "example": "No known allergies"
                },
                "name": {
                    "type": "string",
                    "example": "fake name"
                },
                "role": {
                    "type": "string",
                    "example": "user"
                },
                "verified_email": {
                    "type": "boolean",
                    "example": false
                },
                "weight": {
                    "type": "number",
                    "example": 65.2
                }
            }
        },
        "example.UserStatisticsResponse": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "object",
                    "properties": {
                        "calories": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/example.CalorieStat"
                            }
                        },
                        "heights": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/example.HeightStat"
                            }
                        },
                        "weights": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/example.WeightStat"
                            }
                        }
                    }
                }
            }
        },
        "example.UserSubscriptionResponse": {
            "type": "object",
            "properties": {
                "ai_scans_used": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string",
                    "example": "2023-05-20T10:00:00Z"
                },
                "end_date": {
                    "type": "string",
                    "example": "2023-06-19T10:00:00Z"
                },
                "id": {
                    "type": "string",
                    "example": "x1y2z3w4-v5u6-7890"
                },
                "is_active": {
                    "type": "boolean"
                },
                "payment_method": {
                    "type": "string",
                    "example": "gopay"
                },
                "plan": {
                    "$ref": "#/definitions/example.SubscriptionPlanResponse"
                },
                "start_date": {
                    "type": "string",
                    "example": "2023-05-20T10:00:00Z"
                },
                "user_id": {
                    "type": "string",
                    "example": "u1u2u3u4-v5v6-7890"
                }
            }
        },
        "example.UsersWeightHeightHistory": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "number",
                    "example": 180.8
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "recorded_at": {
                    "type": "string",
                    "example": "2023-10-01T12:00:00Z"
                },
                "user_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "weight": {
                    "type": "number",
                    "example": 50.5
                }
            }
        },
        "example.UsersWeightHeightTarget": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "number",
                    "example": 180.8
                },
                "height_history": {
                    "type": "number",
                    "example": 180.8
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "record_date": {
                    "type": "string",
                    "example": "2023-10-01T12:00:00Z"
                },
                "target_date": {
                    "type": "string",
                    "example": "2023-10-01T12:00:00Z"
                },
                "user_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "weight": {
                    "type": "number",
                    "example": 50.5
                },
                "weight_history": {
                    "type": "number",
                    "example": 50.5
                }
            }
        },
        "example.VerifyEmailResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Verify email successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.VerifyProductTokenResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Verify product token successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.WeightHeightStatistics": {
            "type": "object",
            "properties": {
                "current_height": {
                    "type": "number",
                    "example": 178
                },
                "current_weight": {
                    "type": "number",
                    "example": 75.5
                },
                "latest_weight_target": {
                    "$ref": "#/definitions/example.UsersWeightHeightTarget"
                },
                "weight_history": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/example.UsersWeightHeightHistory"
                    }
                }
            }
        },
        "example.WeightStat": {
            "type": "object",
            "properties": {
                "recorded_at": {
                    "type": "string",
                    "example": "2023-10-10T08:00:00Z"
                },
                "weight": {
                    "type": "number",
                    "example": 50
                }
            }
        },
        "model.ActivityLevel": {
            "type": "string",
            "enum": [
                "Light",
                "Medium",
                "Heavy"
            ],
            "x-enum-varnames": [
                "Light",
                "Medium",
                "Heavy"
            ]
        },
        "model.ArticleCategory": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "model.ArticleResponse": {
            "type": "object",
            "properties": {
                "category_id": {
                    "type": "string"
                },
                "category_name": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "published_at": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "model.BahanMakanan": {
            "type": "object",
            "properties": {
                "abu_g": {
                    "type": "number"
                },
                "air_g": {
                    "type": "number"
                },
                "bdd_persen": {
                    "type": "number"
                },
                "besi_fe_mg": {
                    "type": "number"
                },
                "beta_karoten_mcg": {
                    "type": "number"
                },
                "energi_kal": {
                    "type": "number"
                },
                "fosfor_p_mg": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "kalium_ka_mg": {
                    "type": "number"
                },
                "kalsium_ca_mg": {
                    "type": "number"
                },
                "karbohidrat_g": {
                    "type": "number"
                },
                "karoten_total_mcg": {
                    "type": "number"
                },
                "kelompok_makanan": {
                    "type": "string"
                },
                "kode": {
                    "type": "string"
                },
                "lemak_g": {
                    "type": "number"
                },
                "mentah_olahan": {
                    "type": "string"
                },
                "nama_bahan_makanan": {
                    "type": "string"
                },
                "natrium_na_mg": {
                    "type": "number"
                },
                "niasin_mg": {
                    "type": "number"
                },
                "protein_g": {
                    "type": "number"
                },
                "retinol_vit_a_mcg": {
                    "type": "number"
                },
                "riboflavin_vit_b2_mg": {
                    "type": "number"
                },
                "seng_zn_mg": {
                    "type": "number"
                },
                "serat_g": {
                    "type": "number"
                },
                "tembaga_cu_mg": {
                    "type": "number"
                },
                "thiamin_vit_b1_mg": {
                    "type": "number"
                },
                "vitamin_c_mg": {
                    "type": "number"
                }
            }
        },
        "model.GenderType": {
            "type": "string",
            "enum": [
                "Male",
                "Female"
            ],
            "x-enum-varnames": [
                "Male",
                "Female"
            ]
        },
        "model.LoginStreakData": {
            "type": "object",
            "properties": {
                "current_streak": {
                    "type": "integer"
                },
                "longest_streak": {
                    "type": "integer"
                },
                "weekly_streak": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.LoginStreakDayInfo"
                    }
                }
            }
        },
        "model.LoginStreakDayInfo": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "day_of_week": {
                    "description": "1 = Monday, ..., 7 = Sunday",
                    "type": "integer"
                },
                "has_login": {
                    "type": "boolean"
                }
            }
        },
        "model.PaymentResponse": {
            "type": "object",
            "properties": {
                "order_id": {
                    "type": "string"
                },
                "redirect_url": {
                    "type": "string"
                },
                "transaction_token": {
                    "type": "string"
                }
            }
        },
        "model.ProductToken": {
            "type": "object",
            "properties": {
                "activated_at": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "$ref": "#/definitions/model.User"
                },
                "created_by_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "subscription_plan": {
                    "$ref": "#/definitions/model.SubscriptionPlan"
                },
                "subscription_plan_id": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/model.User"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "model.PurchaseSubscriptionRequest": {
            "type": "object",
            "properties": {
                "payment_method": {
                    "type": "string",
                    "enum": [
                        "gopay",
                        "shopeepay",
                        "bank_transfer",
                        "credit_card"
                    ]
                }
            }
        },
        "model.Recipe": {
            "type": "object",
            "properties": {
                "day": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "ingredients": {
                    "type": "string"
                },
                "instructions": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "model.SubscriptionPlan": {
            "type": "object",
            "properties": {
                "aiscanLimit": {
                    "description": "-1 for unlimited",
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "features": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "description": "in Rupiah",
                    "type": "integer"
                },
                "validityDays": {
                    "description": "in days",
                    "type": "integer"
                }
            }
        },
        "model.SubscriptionPlanResponse": {
            "type": "object",
            "properties": {
                "ai_scan_limit": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "features": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    }
                },
                "id": {
                    "type": "string"
                },
                "is_recommended": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "price_formatted": {
                    "type": "string"
                },
                "validity_days": {
                    "type": "integer"
                }
            }
        },
        "model.User": {
            "type": "object",
            "properties": {
                "activity_level": {
                    "$ref": "#/definitions/model.ActivityLevel"
                },
                "birth_date": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "gender": {
                    "$ref": "#/definitions/model.GenderType"
                },
                "google_id_token": {
                    "type": "string"
                },
                "height": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "medical_history": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "profile_picture": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "verified_email": {
                    "type": "boolean"
                },
                "weight": {
                    "type": "number"
                }
            }
        },
        "model.UserSubscriptionResponse": {
            "type": "object",
            "properties": {
                "ai_scans_used": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "payment_method": {
                    "type": "string"
                },
                "payment_status": {
                    "type": "string"
                },
                "plan": {
                    "$ref": "#/definitions/model.SubscriptionPlanResponse"
                },
                "start_date": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "response.Common": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.CommonResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.ErrorResponse": {
            "type": "object",
            "properties": {
                "errors": {},
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.FeatureAccessResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/response.FeatureData"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.FeatureData": {
            "type": "object",
            "properties": {
                "access": {
                    "type": "boolean"
                },
                "feature": {
                    "type": "string"
                }
            }
        },
        "response.PaymentResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/model.PaymentResponse"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.SubscriptionPlanResponse": {
            "type": "object",
            "properties": {
                "ai_scan_limit": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "features": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    }
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "price_formatted": {
                    "type": "string"
                },
                "validity_days": {
                    "type": "integer"
                }
            }
        },
        "response.SubscriptionPlansResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.SubscriptionPlanResponse"
                    }
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.SuccessWithArticle": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/model.ArticleResponse"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.SuccessWithArticleCategory": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/model.ArticleCategory"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.SuccessWithArticleCategoryList": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ArticleCategory"
                    }
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.SuccessWithArticleList": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ArticleResponse"
                    }
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.SuccessWithBahanMakanan": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/model.BahanMakanan"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.SuccessWithBahanMakananList": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.BahanMakanan"
                    }
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.SuccessWithLoginStreak": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/model.LoginStreakData"
                },
                "message": {
                    "type": "string",
                    "example": "Login streak retrieved successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "response.SuccessWithPaginateSubscriptions": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.UserSubscriptionResponse"
                    }
                },
                "status": {
                    "type": "string"
                },
                "total_pages": {
                    "type": "integer"
                },
                "total_results": {
                    "type": "integer"
                }
            }
        },
        "response.SuccessWithProductToken": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/model.ProductToken"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.SuccessWithRecipe": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/model.Recipe"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.SuccessWithRecipeList": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Recipe"
                    }
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.SuccessWithSubscription": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/model.UserSubscriptionResponse"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.SuccessWithSubscriptionPlan": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/response.SubscriptionPlanResponse"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.SuccessWithUser": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/model.User"
                }
            }
        },
        "response.UserSubscriptionResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/model.UserSubscriptionResponse"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "validation.CreateCustomToken": {
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "is_active": {
                    "type": "boolean"
                },
                "subscription_plan_id": {
                    "type": "string"
                },
                "token": {
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 5
                }
            }
        },
        "validation.CreateUser": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password",
                "role"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "fake@example.com"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "fake name"
                },
                "password": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 8,
                    "example": "password1"
                },
                "role": {
                    "type": "string",
                    "maxLength": 50,
                    "enum": [
                        "user",
                        "admin"
                    ],
                    "example": "user"
                }
            }
        },
        "validation.ForgotPassword": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "fake@example.com"
                }
            }
        },
        "validation.Login": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "fake@example.com"
                },
                "password": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 8,
                    "example": "password1"
                }
            }
        },
        "validation.Register": {
            "type": "object",
            "required": [
                "activity_level",
                "birth_date",
                "email",
                "gender",
                "height",
                "name",
                "password",
                "weight"
            ],
            "properties": {
                "activity_level": {
                    "enum": [
                        "Light",
                        "Medium",
                        "Heavy"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.ActivityLevel"
                        }
                    ],
                    "example": "Medium"
                },
                "birth_date": {
                    "type": "string",
                    "example": "2000-01-01T00:00:00Z"
                },
                "email": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "fake@example.com"
                },
                "gender": {
                    "enum": [
                        "Male",
                        "Female"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.GenderType"
                        }
                    ],
                    "example": "Male"
                },
                "height": {
                    "type": "number",
                    "example": 170.5
                },
                "medical_history": {
                    "type": "string",
                    "maxLength": 1000,
                    "example": "No known medical issues"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "fake name"
                },
                "password": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 8,
                    "example": "password1"
                },
                "weight": {
                    "type": "number",
                    "example": 65.5
                }
            }
        },
        "validation.UpdatePassOrVerify": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 8,
                    "example": "password1"
                }
            }
        },
        "validation.UpdatePaymentStatus": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "type": "string",
                    "enum": [
                        "pending",
                        "success",
                        "failed"
                    ]
                }
            }
        },
        "validation.UpdateProductToken": {
            "type": "object",
            "properties": {
                "is_active": {
                    "type": "boolean"
                },
                "subscription_plan_id": {
                    "description": "Allow empty string to clear the plan",
                    "type": "string"
                },
                "token": {
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 5
                }
            }
        },
        "validation.UpdateSubscription": {
            "type": "object",
            "properties": {
                "ai_scans_used": {
                    "type": "integer",
                    "minimum": 0
                },
                "end_date": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "payment_method": {
                    "type": "string"
                },
                "plan_id": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                }
            }
        },
        "validation.UpdateSubscriptionPlan": {
            "type": "object",
            "properties": {
                "ai_scan_limit": {
                    "type": "integer",
                    "minimum": 1
                },
                "description": {
                    "type": "string"
                },
                "features": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    }
                },
                "is_active": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "price": {
                    "type": "integer",
                    "minimum": 1
                },
                "validity_days": {
                    "type": "integer",
                    "minimum": 1
                }
            }
        },
        "validation.UpdateUser": {
            "type": "object",
            "properties": {
                "activity_level": {
                    "enum": [
                        "Light",
                        "Medium",
                        "Heavy"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.ActivityLevel"
                        }
                    ],
                    "example": "Medium"
                },
                "birth_date": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "fake@example.com"
                },
                "gender": {
                    "enum": [
                        "Male",
                        "Female"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.GenderType"
                        }
                    ],
                    "example": "Male"
                },
                "height": {
                    "type": "number",
                    "maximum": 300,
                    "minimum": 0,
                    "example": 175.5
                },
                "medical_history": {
                    "type": "string",
                    "maxLength": 1000,
                    "example": "No known allergies"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "fake name"
                },
                "password": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 8,
                    "example": "password1"
                },
                "profile_picture": {
                    "type": "string",
                    "example": "https://example.com/image.jpg"
                },
                "weight": {
                    "type": "number",
                    "maximum": 500,
                    "minimum": 0,
                    "example": 70.3
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Example Value: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}